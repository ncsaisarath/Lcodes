Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

class Solution {
    
    public int[] twoSum(int[] nums, int target) {
        int i = 0;
        int j = i + 1;
        int spacer = 0;
        while (i < nums.length && j < nums.length){
            if (nums[i] + nums[j] == target){
                return new int[]{i, j};
            }
            if (j == nums.length - 1){
                spacer++;
                i = 0;
                j = i + 1 + spacer;
            }
            if (nums[i] + nums[j] == target){
                return new int[]{i, j};
            }
            i++;
            j++;
        }
        return null;
    }
    
    public int[] twoSumOld(int[] nums, int target) {
        //int[] answer = new int[2];
        int size = nums.length;
        Map<Integer, Integer> twoSumMap = new HashMap<>();
        for(int i=0; i<size; i++){
            //check if target-nums[i] already in HM
            //yes -> get that index and put it in answer[0], put the current index in answer[1] and return
            //no -> put the current value and index in HM
            int pairElement = target-nums[i];
            if(twoSumMap.containsKey(pairElement)){
                /*answer[0] = twoSumMap.get(pairElement);
                answer[1] = i;
                break;*/
                return new int[]{ twoSumMap.get(pairElement), i };
            } else {
                twoSumMap.put(nums[i], i);
            }
        }
        return null;
    }
}

class Solution2 {
    public int[] twoSum(int[] nums, int target) {
        // int[] ans = new int[2];
        if(nums.length<2){
            return new int[]{};
        }
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(nums[0],0);
        for(int i=1; i<nums.length; i++)
        {
            int temp = target-nums[i];
            if(map.containsKey(temp))
            {
                // ans[0] = map.get(temp);
                // ans[1] = i;
                return new int[]{map.get(temp),i};
            }
            map.put(nums[i],i);
        }
        return new int[]{};
    }
}
