Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:

Input: nums = [0]
Output: [0]

 

Constraints:

    1 <= nums.length <= 104
    -231 <= nums[i] <= 231 - 1

 
Follow up: Could you minimize the total number of operations done?

class Solution {
    public void moveZeroes(int[] nums) {
        int i=0,j=0;
        
        int t=nums.length-1;
        while(i<=t)
        {
            if(nums[i]!=0)
            {
                nums[j++]=nums[i]; 
            }
            i++;
        }
        
        j=t-j+1;
        
        while(j!=0)
        {
            nums[t--]=0;
            j--;
        }
    }
}

class Solution2 {
    public void moveZeroes(int[] nums) {
        
        int i=0,l=0;
        for(;i<nums.length;i++){
            if(nums[i]!=0){
                nums[l++]=nums[i];
            }
        }
        while(l<nums.length){
            nums[l++]=0;
        }
        
    }
}
