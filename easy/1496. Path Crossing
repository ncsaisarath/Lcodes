Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.

 

Example 1:

Input: path = "NES"
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.

Example 2:

Input: path = "NESWW"
Output: true
Explanation: Notice that the path visits the origin twice.

 

Constraints:

    1 <= path.length <= 104
    path[i] is either 'N', 'S', 'E', or 'W'.


class Solution {
    public boolean isPathCrossing(String path) {
        // 1. 1 <= path.length <= 10^4
        // 2. path[i] is either 'N', 'S', 'E', or 'W'.        
        final Set<Integer> marks = new HashSet<Integer>();
        final int n = path.length();
        
        int x = 0, y = 0;
        marks.add(hashCode(x, y));

        for (int i = 0; i < n; i++) {
            final char move = path.charAt(i);
            switch (move) {
                case 'N': x--; break;
                case 'S': x++; break;
                case 'W': y--; break;
                case 'E': y++; break;
            }
            final int hashValue = hashCode(x, y);
            if (!marks.add(hashValue)) return true;
        }

        return false;
    }

    private int hashCode(int x, int y) { return x * 20001 + y; }

}



class Solution {
    public boolean isPathCrossing(String path) {
         Set<String> set = new HashSet<>();
        int x = 0, y = 0;
        set.add(x+","+y);
        for(char step : path.toCharArray()){
            if(step == 'N'){
                x+=1;
            }else if(step == 'S'){
                x-=1;
            }else if(step == 'E'){
                y+=1;
            }else{
                y-=1;
            }
            String point = x+","+y;
            if(set.contains(point)){
                return true;
            }
            set.add(point);
        }
        return false;
    }
}
