We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a pre-defined API int guess(int num), which returns three possible results:

    -1: Your guess is higher than the number I picked (i.e. num > pick).
    1: Your guess is lower than the number I picked (i.e. num < pick).
    0: your guess is equal to the number I picked (i.e. num == pick).

Return the number that I picked.

 

Example 1:

Input: n = 10, pick = 6
Output: 6

Example 2:

Input: n = 1, pick = 1
Output: 1

Example 3:

Input: n = 2, pick = 1
Output: 1

 

Constraints:

    1 <= n <= 2^31 - 1
    1 <= pick <= n

/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
    return bsearch(1,n);
}
private int bsearch(int start,int end){
    if(start>end) return -1;//R u kidding me?
    if(guess(start)==0) return start;
    if(guess(end)==0) return end;
    int mid = start+(end-start)/2;
    if(guess(mid)==0) return mid;
    else if(guess(mid)==-1) return bsearch(start+1,mid-1);
    else return bsearch(mid+1,end-1);
}
}

public class Solution2 extends GuessGame {
    public int guessNumber(int n) {
        if(guess(n)==0)
            return n;
        int low=1,high=n;
        while(low<=high){
            int mid = low+(high-low)/2;
            int res = guess(mid);
            if(res==0)
                return mid;
            else if(res==-1)
                high=mid-1;
            else
                low=mid+1;
        }
        return -1;
    }
}
