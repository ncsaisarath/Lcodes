Given an integer array nums, handle multiple queries of the following type:

    Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.

Implement the NumArray class:

    NumArray(int[] nums) Initializes the object with the integer array nums.
    int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).

 

Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3

 

Constraints:

    1 <= nums.length <= 10^4
    -10^5 <= nums[i] <= 10^5
    0 <= left <= right < nums.length
    At most 10^4 calls will be made to sumRange.



class NumArray {

    int[] copy ;
    
    public NumArray(int[] nums) {
        copy = new int[nums.length];
        
        copy[0] = nums[0];
    
        for(int i = 1; i < nums.length ; i++) {
               copy[i] = nums[i] + copy[i-1];
        }
        
    }
    
    public int sumRange(int left, int right) {
        
        if(left == 0) return copy[right];
        
        return copy[right] - copy[left - 1];
        
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.sumRange(left,right);
 */

class NumArray2 {
    int tree[];
    int n;
    int build(int L, int R, int pos, int [] nums){
        if (L == R){
            tree[pos] = nums[L];
            return tree[pos];
        }
        int mid = (L + R )/2;
        tree[pos] = build(L, mid, pos*2, nums) + build(mid+1, R, pos*2+1, nums);
        return tree[pos];
        
    }
    public NumArray(int[] nums) {
        
        n = nums.length;
        if( n == 0) return;
        if( (n &(n-1)) == 0){
            tree = new int[2 * n];
        }
        else{
            int count = 0;
            int n1 = n;
            while( n1 > 0){
                count++;
                n1 >>= 1;
            }
            tree = new int[ 2 *( 1 <<count)];
            
        }
        build(0, n-1, 1, nums);
    }
    
    int find(int st, int end, int L, int R, int pos){
        if( end < L || R < st)
            return 0;
        if( st <= L && R <= end )
            return tree[pos];
        int mid = (L + R) /2;
        return find(st, end, L, mid, pos*2) + find(st, end, mid+1, R, pos*2+1);
    }
    public int sumRange(int i, int j) {
        
        return find(i, j , 0 , n-1,1);
        
    }
}
