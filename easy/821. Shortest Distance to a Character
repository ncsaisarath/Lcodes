Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute value function.

 

Example 1:

Input: s = "loveleetcode", c = "e"
Output: [3,2,1,0,1,0,0,1,2,2,1,0]
Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).
The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.
The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.
For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.
The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.

Example 2:

Input: s = "aaab", c = "b"
Output: [3,2,1,0]

 

Constraints:

    1 <= s.length <= 104
    s[i] and c are lowercase English letters.
    It is guaranteed that c occurs at least once in s.


class Solution {
    public int[] shortestToChar(String s, char c) {
        int n = s.length();
    int[] result = new int[n];
    int idx = s.indexOf(c);
    int pos = 0;
    
    for(int i = idx; i >= 0; i--) {
      result[pos++] = i;
    }
    
    for(int i = idx + 1; i < n; i++) {
      if(s.charAt(i) == c) {
        int mid = ((i + idx)/2) + 1;
        for(int j = mid; j < i; j++) {
          result[j] = i - j;
        }
        idx = i;
      }
      result[i] = i - idx;
    }
    
    return result;
    }
}


class Solution {
    public int[] shortestToChar(String s, char c) {
        int[] res = new int[s.length()];
        Arrays.fill(res,Integer.MAX_VALUE);
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)!=c){
                continue;
            }  
            else{
                res[i]=0;
                int count=0;
                int j=i-1;
                while(j>=0 && s.charAt(j)!=c){
                    res[j]=Math.min(res[j],++count);
                    j--;
                }
                j=i+1;
                count=0;
                while(j<s.length()&&s.charAt(j)!=c){
                    res[j]=Math.min(res[j],++count);
                    j++;
                }
            }
        }
        return res;
    }
}
