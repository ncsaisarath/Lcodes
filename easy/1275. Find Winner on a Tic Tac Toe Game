Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

    Players take turns placing characters into empty squares ' '.
    The first player A always places 'X' characters, while the second player B always places 'O' characters.
    'X' and 'O' characters are always placed into empty squares, never on filled ones.
    The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
    The game also ends if all squares are non-empty.
    No more moves can be played if the game is over.

Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

 

Example 1:

Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.

Example 2:

Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: B wins.

Example 3:

Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.

 

Constraints:

    1 <= moves.length <= 9
    moves[i].length == 2
    0 <= rowi, coli <= 2
    There are no repeated elements on moves.
    moves follow the rules of tic tac toe.


class Solution {
    public String tictactoe(int[][] moves) {
        int rows[] = new int[3];
        int cols[] = new int[3];
        int diag = 0;
        int antiDiag = 0;
        int score = 1;
        for (int i = 0; i < moves.length; i++) {
            if ( moves[i][0] == moves[i][1] ) {
                diag += score;
            }
            if ( moves[i][0] + moves[i][1] == 2)
                antiDiag +=score;
            rows[moves[i][0]] += score;
            cols[moves[i][1]] += score;
            if ( diag == score * 3 || antiDiag == score * 3 || rows[moves[i][0]] == score * 3 || cols[moves[i][1]] == score * 3)
                return score == 1 ? "A" : "B";
            score *= -1;    
        }
        if (moves.length == 9)
            return "Draw";
        else
            return "Pending";
    }
}



class Solution {
    public String tictactoe(int[][] moves) {
        char[][] boards = new char[3][3];
    int turn = 1;
    String winner = null;
    
    //putting all the moves to the board
    for(int[] move : moves){
        if(turn %2 != 0){
            boards[move[0]][move[1]] = 'X';
        }
        else{
            boards[move[0]][move[1]] = 'O';
        }
        turn++;
    }

    
    for(int i=0;i<boards.length; i++){
        
        //check all rows
        if(boards[i][0]=='X'&&boards[i][1]=='X'&&boards[i][2]=='X'){
            winner = "A";
        }
        else if(boards[i][0]=='O'&&boards[i][1]=='O'&&boards[i][2]=='O'){
            winner = "B";
        }
        
        //check all columns
        if(boards[0][i]=='X'&&boards[1][i]=='X'&&boards[2][i]=='X'){
            winner = "A";
        }
        else if(boards[0][i]=='O'&&boards[1][i]=='O'&&boards[2][i]=='O'){
            winner = "B";
        }
        
        //check diagonals
        if(boards[0][0]=='X'&&boards[1][1]=='X'&&boards[2][2]=='X' || boards[0][2]=='X'&&boards[1][1]=='X'&&boards[2][0]=='X'){
            winner = "A";
        }
        else if(boards[0][0]=='O'&&boards[1][1]=='O'&&boards[2][2]=='O' || boards[0][2]=='O'&&boards[1][1]=='O'&&boards[2][0]=='O'){
            winner = "B";
        }
        
        //if the board is full and the conditions above never met
        if(turn>9 && winner ==null){
            winner = "Draw";
        }
        //if the board isn't full and all the conditions above never met
        else if(turn<10 && winner==null){
            winner = "Pending";
        }
    }
    
    return winner;
        
        
    }
}
