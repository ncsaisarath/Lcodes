Given a date, return the corresponding day of the week for that date.

The input is given as three integers representing the day, month and year respectively.

Return the answer as one of the following values {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}.

 

Example 1:

Input: day = 31, month = 8, year = 2019
Output: "Saturday"

Example 2:

Input: day = 18, month = 7, year = 1999
Output: "Sunday"

Example 3:

Input: day = 15, month = 8, year = 1993
Output: "Sunday"

 

Constraints:

    The given dates are valid dates between the years 1971 and 2100.



class Solution {
    public String dayOfTheWeek(int day, int month, int year) {
        String[] week = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        int dayIndex = getDayIndex(day, month, year);
        return week[dayIndex];
    }
    public int getDayIndex(int day, int month, int year) {
        if (month < 3) {
            month += 12;
            year--;
        }
        int centry = year / 100;
        year %= 100;
        int w = year + year / 4 + centry / 4 - 2 * centry + 26 * (month + 1) / 10 + day - 1;
        return (w % 7 + 7) % 7;
    }
}


import java.time.*;
import java.time.DayOfWeek; 
class Solution {
    public String dayOfTheWeek(int day, int month, int year) {
        String[] week = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"};
        Month mon = Month.of(month);
        LocalDate localDate = LocalDate.of(year,mon, day);
        DayOfWeek dayOfWeek = DayOfWeek.from(localDate);
        return week[dayOfWeek.getValue()-1];
    }
}


import java.time.LocalDate;
import java.time.format.TextStyle;
import java.util.Locale;

class Solution {
    public String dayOfTheWeek(int day, int month, int year) {
        String ans = LocalDate.of(year, month, day).getDayOfWeek().toString();
        return ans.substring(0, 1).toUpperCase() + ans.substring(1).toLowerCase();
    }
}



import java.time.LocalDate;
class Solution {
    public String dayOfTheWeek(int day, int month, int year) {
        LocalDate localDate = LocalDate.of(year, month, day);
        java.time.DayOfWeek dayOfWeek = localDate.getDayOfWeek();
        // String[] arr = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        String output = dayOfWeek.toString().toLowerCase();
            String output2 =  output.substring(0,1).toUpperCase()+output.substring(1);
        return output2;
}
}



class Solution {
    public String dayOfTheWeek(int day, int month, int year) {
        int m[] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
        int s = 0;
        int y = 1971;
        while(year>y){
            s += 365;
            if(y%4==0 && y%100!=0 || y%400==0){
                s++;
            }
            y++;
        }
        s += m[month-1] + day;
        if(month>2&&(y%4==0 && y%100!=0 || y%400==0)){
            s++;
        }
        switch(s%7){
                case(0):
                return "Thursday";
                case(1):
                return "Friday";
                case(2):
                return "Saturday";
                case(3):
                return "Sunday";
                case(4):
                return "Monday";
                case(5):
                return "Tuesday";
                case(6):
                return "Wednesday";
        }
        
        return "";
        
    }
}
