Given the root of a binary tree, return the preorder traversal of its nodes' values.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer>a= new ArrayList();
        TreeNode temp= root;
        while(temp!=null){
            if(temp.left==null){
                a.add(temp.val);
                temp=temp.right;
            }
            else{
                TreeNode prev=temp.left;
                while(prev.right!=null&&prev.right!=temp){
                    prev=prev.right;
                }
                if(prev.right==null){
                    prev.right=temp;
                    a.add(temp.val);
                    temp=temp.left;
                }else{
                    prev.right=null;
                    temp=temp.right;
                }    
            }
        }
        return a;
    }
}

class Solution2 {
    List<Integer> res;
    public List<Integer> preorderTraversal(TreeNode root) {
        
        res = new ArrayList<Integer>();
        preorder(root);
    
        return res;    
    }
    
    public void preorder(TreeNode x){
        if(x==null)
            return;
        res.add(x.val);
        preorder(x.left);
        preorder(x.right);
    }
}
