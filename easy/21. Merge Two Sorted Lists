You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null) {
            return list2;
        } else if (list2 == null) {
            return list1;
        } else if (list1.val <= list2.val) {
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;
        } else {
            list2.next = mergeTwoLists(list1, list2.next);
            return list2;
        }
    }
}



class Solution {
   	public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		if (l1 == null || l2 == null) {
			return l1 == null ? l2 : l1;
		}
		ListNode head = l1.val<=l2.val? l1: l2;
		ListNode cur1 = head.next;
		ListNode cur2 = head==l1?l2:l1;
		ListNode pre = head;
		while(cur1!=null && cur2!=null) {
			if(cur1.val<=cur2.val) {
				pre.next = cur1;
				cur1 = cur1.next;
			}
			else {
				pre.next = cur2;
				cur2 = cur2.next;
			}
			pre = pre.next;
		}
		pre.next = cur1!=null?cur1:cur2;
		
		return head;
		
	}
}

class Solution2 {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        ListNode head=new ListNode();
        ListNode curr=head;
        
        while(list1!=null && list2!=null){
            int l1=list1.val;
            int l2=list2.val;
            if(l1<=l2){
                curr.next=new ListNode(l1);
                curr=curr.next;
                list1=list1.next;
            }else{
                curr.next=new ListNode(l2);
                curr=curr.next;
                list2=list2.next;
            }
        }
        if(list1!=null){
            curr.next=list1;
        }
        
        if(list2!=null){
            curr.next=list2;
        }
        
        return head.next; 
    }
}
