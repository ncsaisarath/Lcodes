Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

    MyHashMap() initializes the object with an empty map.
    void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
    int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
    void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.

 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]

 

Constraints:

    0 <= key, value <= 10^6
    At most 10^4 calls will be made to put, get, and remove.




class MyHashMap {
    class Node {
        int key;
        int val;
        Node next;
        
        Node() {}
        
        Node(int key, int val) {
            this.key = key;
            this.val = val;
        }
        
        Node(Node next) {
            this.next = next;
        }
    }

    
    Node[] nodes;

    public MyHashMap() {
        nodes = new Node[10000];
    }
    
    public void put(int key, int value) {
        int hash = hash(key);
        Node start = nodes[hash];
        Node fakeHead = new Node(start);
        while(start != null) {
            if(start.key == key) {
                start.val = value;
                return;
            }
            start = start.next;
            fakeHead = fakeHead.next;
        }
        
        start = new Node(key, value);
        fakeHead.next = start;
        if(nodes[hash] == null) nodes[hash] = start;
    }
    
    public int get(int key) {
        int hash = hash(key);
        Node start = nodes[hash];
        while(start != null) {
            if(start.key == key) {
                return start.val;
            }
            start = start.next;
        }
        return -1;
    }
    
    public void remove(int key) {
        int hash = hash(key);
        if(nodes[hash] == null) return;
        
        Node start = nodes[hash];
        Node fakeHead = new Node(start);
        while(start != null) {
            if(start.key == key) {
                fakeHead.next = start.next;
            }
            start = start.next;
            fakeHead = fakeHead.next;
        }
        if(nodes[hash].key == key) nodes[hash] = nodes[hash].next;
        
        
    }
    
    
    private int hash(int key) {
        return key % 10000;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */


class MyHashMap {
    
    
    List<String> keys;
    List<Integer> values;

    public MyHashMap() {
        keys = new LinkedList<>();
        values = new LinkedList<>();
    }
    
    public void put(int key, int value) {
        if(!keys.contains(""+key)){
            keys.add(""+key);
            values.add(value);
        }else{
            int index = keys.indexOf(""+key);
            values.set(index,value);
        }
        
    }
    
    public int get(int key) {
        if(keys.contains(""+key))
            return values.get(keys.indexOf(""+key));
        return -1;
    }
    
    public void remove(int key) {
        if(keys.size()>0){
            int index = keys.indexOf(""+key);
            if(index>=0){
                keys.remove(index);
                values.remove(index);
            } 
        }   
    }
}
