You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

 

Example 1:

Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75

Example 2:

Input: nums = [5], k = 1
Output: 5.00000

 

Constraints:

    n == nums.length
    1 <= k <= n <= 10^5
    -10^4 <= nums[i] <= 10^4
    

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int s = 0;
        
        for (int i = 0; i < k; i++){
            s+=nums[i];
        }
        int max =s;
        
        for (int j = 0; j < nums.length - k; j++){
            
            s = s - nums[j] + nums[j + k];
            if (s > max) {
                max = s;
            }
            
        }
        
        return (double) max/k;
    }
}


class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int n = nums.length;
        double sum=0;
        for(int i=0;i<k;i++){
            sum+=nums[i];
        }
        if(n==k)
            return sum/k;
        double max = sum;
        for(int i=k;i<n;i++){
            sum += nums[i]-nums[i-k];
            if(sum>max)
                max=sum;
        }
        return max/k;
        
    }
}

