You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.

Return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.

An integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.

 

Example 1:

Input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5
Output: true
Explanation: Every integer between 2 and 5 is covered:
- 2 is covered by the first range.
- 3 and 4 are covered by the second range.
- 5 is covered by the third range.

Example 2:

Input: ranges = [[1,10],[10,20]], left = 21, right = 21
Output: false
Explanation: 21 is not covered by any range.

 

Constraints:

    1 <= ranges.length <= 50
    1 <= starti <= endi <= 50
    1 <= left <= right <= 50



class Solution {
    public boolean isCovered(int[][] ranges, int left, int right) {
        int n = ranges.length;
        boolean flag = false;
        for(int j=left; j<=right; j++) {
            for(int i=0; i<n; i++) {
                if(j>=ranges[i][0] && j<=ranges[i][1]) {
                    flag = true;
                    break;
                }
            }
            if(flag == false) {
                return false;
            }
            flag = false;
        }
        return true;
    }
}



class Solution {
    public boolean isCovered(int[][] ranges, int left, int right) {
        Arrays.sort(ranges, new Comparator<int[]>() {
            public int compare(int[] row1, int row2[]) {
                
                if(row1[0] < row2[0])
                    return -1;
                else if(row1[0] == row2[0]) {
                    if(row1[1] <= row2[1])
                        return -1;
                    else
                        return 1;
                }
                else{
                    return 1;
                }
            }            
        });
        
        int j = 0;
        
        for(int i=left; i <=right && j < ranges.length;) {
            if(ranges[j][0] <= i  && i<= ranges[j][1]) {
                i++;
            }
            else{
                j++;
            }
        }
        
        return j < ranges.length;
    }
}



class Solution {
    public boolean isCovered(int[][] ranges, int left, int right) {
        boolean[] bools = new boolean[51];
        for(int[] x:ranges){
            for(int i=x[0];i<=x[1];i++){
                bools[i]=true;
            }
        }
        for(int i=left;i<=right;i++){
            if(!bools[i])
                return false;
        }
        return true;
    }
}
