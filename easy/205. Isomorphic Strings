Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

Example 1:

Input: s = "egg", t = "add"
Output: true

Example 2:

Input: s = "foo", t = "bar"
Output: false

Example 3:

Input: s = "paper", t = "title"
Output: true

 

Constraints:

    1 <= s.length <= 5 * 104
    t.length == s.length
    s and t consist of any valid ascii character.

class Solution {
	public boolean isIsomorphic(String s, String t) {
		char[] tmp = new char[128];
		char[] sc = s.toCharArray();
		char[] tc = t.toCharArray();
		boolean[] done = new boolean[128];

		int n = sc.length;
		for (int i = 0; i < n; i++) {
			if (tmp[sc[i]] == 0) {
				if (done[tc[i]]) {
					return false;
				}
				tmp[sc[i]] = tc[i];
				done[tc[i]] = true;
			}
			else {
				if (tmp[sc[i]] != tc[i]) {
					return false;
				}
			}
		}

		return true;
	}
}

class Solution2 {
    public boolean isIsomorphic(String s, String t) {
        
        Map<Character,Character> map = new HashMap<>();
        int count=0;
        for(int i=0;i<s.length();i++){
            if(!map.containsKey(s.charAt(i))){
                if(!map.containsValue(t.charAt(i)))
                    map.put(s.charAt(i),t.charAt(i));
                else
                    return false;
                continue;
            }else{
                if(map.get(s.charAt(i))!=t.charAt(i))
                    return false;
                
            }
        }
        return true;
    }
}
