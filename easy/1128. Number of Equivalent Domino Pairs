Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

 

Example 1:

Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1

Example 2:

Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
Output: 3

 

Constraints:

    1 <= dominoes.length <= 4 * 10^4
    dominoes[i].length == 2
    1 <= dominoes[i][j] <= 9


class Solution {
    
    public int numEquivDominoPairs(int[][] dominoes) {
        
        int[] freq=new int[1000]; //99 is 512
        int res=0;
        for(int[] d: dominoes){
            int val=1<<d[0] | 1<<d[1];
            res+=freq[val];
            freq[val]++;
        }
        return res;
    }
    
    //or no of combinations = Cr = n! / r! (n - r)! 
    //here r==2 so Cr=n*(n-1)/2
    //94%
    public int numEquivDominoPairs12(int[][] dominoes) {
        //max num can be 99 since dominoes[i][j]=<=9
        int[] freq = new int[100];
        //Map<Dominoes, Integer> hm = new HashMap<>();
       // Map<Integer, Integer> hm = new HashMap<>();
        
        int pairCount=0;
        for(int[] arr: dominoes){
            //Dominoes curr = new Dominoes(arr[0], arr[1]);
            
            int curr = Math.min(arr[0], arr[1])*10+Math.max(arr[0], arr[1]);
            int count=freq[curr];
            pairCount+=count;
            freq[curr]++;
        }
        
        return pairCount;
    }
}


class Solution {
     public static int numEquivDominoPairs(int[][] dominoes) {
         //************************************************************
         //*** IMPORTANT use array int[10][10] instaed of a hashMap
         //************************************************************
         int[][] map = new int[10][10];
         int count = 0;
         
         for(int i=0; i< dominoes.length; i++) {
             int n1 = dominoes[i][0];
             int n2 = dominoes[i][1];
             count += map[n1][n2]++;
             //**********************************************
             //*** IMPORTANT check for n1 == n2
             // Notice we doe not increment   map[n2][n1];
             //**********************************************
             if(n1 != n2) {
                count += map[n2][n1];
             }
             
             
         }
         
         return count;
     }
}


class Solution {
    public int numEquivDominoPairs(int[][] dominoes) {
        
        int[] counts = new int[100];
        int res = 0;
        //check every pair of dominoes
        for (int[] d : dominoes) {
            //get upper and down number, make upper always smaller
            int up = d[0] < d[1] ? d[0] : d[1]; 
			int down = d[0] < d[1] ? d[1] : d[0];
            //increment number of times we've seen exactly this pair
            //if more than once increment result, every next same pair will contribute on 1 more than a previous one
            res+=counts[up * 10 + down]++;
        }

        return res;
    }
}
