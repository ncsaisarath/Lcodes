Given a string s, return true if the s can be palindrome after deleting at most one character from it.

 

Example 1:

Input: s = "aba"
Output: true

Example 2:

Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.

Example 3:

Input: s = "abc"
Output: false

 

Constraints:

    1 <= s.length <= 10^5
    s consists of lowercase English letters.


class Solution {
    public boolean validPalindrome(String s) {
        int n = s.length();
        byte[] a = s.getBytes();
        int i=0; int j=n-1;
        
        while(i<j){
            if(a[i] != a[j]){
                return (func(a,i+1,j) || func(a, i, j-1));
            }
            i++;
            j--;
        }
        return true;
    }
    
    public boolean func(byte[] a, int i, int j){
        while(i<j){
            if(a[i] != a[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
}


class Solution {
    public boolean validPalindrome(String s) {
        return solve(s,0,s.length()-1,false);
    }
    
    public boolean solve(String s,int l,int r, boolean change){
        while(l<r){
            if(s.charAt(l)!=s.charAt(r)){
                if(change)
                    return false;
                return solve(s,l+1,r,true)||solve(s,l,r-1,true);
            }
            l++;
            r--;
        }
        return true;
    }
}
