Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

    void add(key) Inserts the value key into the HashSet.
    bool contains(key) Returns whether the value key exists in the HashSet or not.
    void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.

 

Example 1:

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)

 

Constraints:

    0 <= key <= 10^6
    At most 10^4 calls will be made to add, remove, and contains.
    
    


class MyHashSet {

    /** Initialize your data structure here. */
    boolean[] record;
    public MyHashSet() {
        record=new boolean[1];
    }
    
    public void add(int key) {
        if(key>=record.length) extend(key);
        record[key]=true;
    }
    
    public void remove(int key) {
        if(key<record.length)
            record[key]=false;
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        if(key>=record.length) return false;
        return record[key];
    }
    public void extend(int key){
        record=Arrays.copyOf(record,key+100);
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */


class MyHashSet2 {
    int[] arr;
    public MyHashSet() {
        arr = new int[1000001];
    }
    
    public void add(int key) {
        arr[key]=1;
    }
    
    public void remove(int key) {
        arr[key]=0;
    }
    
    public boolean contains(int key) {
        return arr[key]==1;
    }
}

