Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

 

Example 1:

Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.

Example 2:

Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.

 

Constraints:

    1 <= n <= 10^4
    nums.length == 2 * n
    -10^4 <= nums[i] <= 10^4


class Solution {
	public int arrayPairSum(int[] nums) {
		int[] map = new int[20001];
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			map[nums[i] + 10000]++;
		}

		int maxSum = 0;
		int i = 0;
		outer:
		while (i < 20001) {
			while (map[i] > 1) {
				maxSum += i - 10000;

				map[i] -= 2;
			}

			if (map[i] == 0) {
				i++;
			}
			else {
				maxSum += i - 10000;
				while (true) {
					if (++i == 20001) {
						break outer;
					}
					else if (map[i] > 0) {
						map[i]--;
						break;
					}
				}
			}
		}

		return maxSum;
	}
}


class Solution2 {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int sum=0;
        for(int i=0;i<nums.length-1;i+=2){
            sum+=Math.min(nums[i],nums[i+1]);
        }
        return sum;
    }
}
