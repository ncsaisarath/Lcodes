You are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters.

Return the number of strings in words that are a prefix of s.

A prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: words = ["a","b","c","ab","bc","abc"], s = "abc"
Output: 3
Explanation:
The strings in words which are a prefix of s = "abc" are:
"a", "ab", and "abc".
Thus the number of strings in words which are a prefix of s is 3.

Example 2:

Input: words = ["a","a"], s = "aa"
Output: 2
Explanation:
Both of the strings are a prefix of s. 
Note that the same string can occur multiple times in words, and it should be counted each time.

 

Constraints:

    1 <= words.length <= 1000
    1 <= words[i].length, s.length <= 10
    words[i] and s consist of lowercase English letters only.



class Solution {
  public int countPrefixes(String[] words, String s) {
     return count(words,s,0,0); 
}

static int count(String[] words, String s, int count,int idx){
    if(idx== words.length){
        return count;
    }

    if(s.startsWith(words[idx])){
    count++;
    }
    idx++;
    return count(words,s,count,idx);
}
}




class Solution {
    
    public int countPrefixes(String[] words, String s) {
        // 2 - pointer.
        
        int n = words.length;
        int count = 0;
        for(String word: words) {
            int p = 0;
            int l = word.length();
            if(l <= s.length()) {
                while(p < l) {
                    if(word.charAt(p) == s.charAt(p))
                        p += 1;
                    else
                        break;
                }
            }
            if(p == l)
                count += 1;
        }
        
        return count;
    }
    
}



class Solution {
    public int countPrefixes(String[] words, String s) {
        int count=0;
        for(String word:words){
            if(s.startsWith(word))
                count++;
        }
        return count;
    }
}
