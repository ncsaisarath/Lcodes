In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

    The town judge trusts nobody.
    Everybody (except for the town judge) trusts the town judge.
    There is exactly one person that satisfies properties 1 and 2.

You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

 

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2

Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3

Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1

 

Constraints:

    1 <= n <= 1000
    0 <= trust.length <= 10^4
    trust[i].length == 2
    All the pairs of trust are unique.
    ai != bi
    1 <= ai, bi <= n


class Solution {
    public int findJudge(int n, int[][] trust) {
        int[] appearence = new int[n];
        for(int i = 0; i < trust.length; i++) {
            appearence[(trust[i][0]) - 1] = 1;
        }
        int townJudgeCount = 0;
        int answer = 0;
        for(int i = 0; i < n; i++) {
            if(appearence[i] != 1) {
                answer = i + 1;
                townJudgeCount++;
            };
        }
        if(townJudgeCount != 1) return -1;
        
        int count = 0;
        for(int i = 0; i < trust.length; i++) {
            if(trust[i][1] == answer) {
                count += 1;
            }
        }
        if((count + 1) != n) return -1;
        
        return answer;
    }
}


class Solution {
    public int findJudge(int n, int[][] trust) {
        int arr[] = new int[n + 1]; 
        
        for(int i = 0; i < trust.length; i++){
            arr[trust[i][0]]--; 
            arr[trust[i][1]]++; 
            
        }
        
        for(int i = 1; i < arr.length; i++){
            if(arr[i] == n - 1) return i; 
        }
        return -1;
    }
}
