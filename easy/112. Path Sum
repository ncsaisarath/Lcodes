Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null){
            return false;
        }
        
        targetSum -= root.val;
        
        //at a leaf?
        if(root.left == null && root.right == null){
            return targetSum == 0;
        }else{
         
            return hasPathSum(root.left,targetSum) || hasPathSum(root.right,targetSum);
        }
    }
}

class Solution2 {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null)
            return false;
        boolean ans=false;
        int sum = targetSum - root.val;
        if(sum==0 && root.left==null && root.right==null)
            return true;
        if(root.left!=null)
            ans = ans || hasPathSum(root.left, sum);
        if(root.right!=null)
            ans = ans || hasPathSum(root.right, sum);
        
        return ans;
         
    }   
}
