A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

    s[i] == 'I' if perm[i] < perm[i + 1], and
    s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.

 

Example 1:

Input: s = "IDID"
Output: [0,4,1,3,2]

Example 2:

Input: s = "III"
Output: [0,1,2,3]

Example 3:

Input: s = "DDI"
Output: [3,2,0,1]

 

Constraints:

    1 <= s.length <= 10^5
    s[i] is either 'I' or 'D'.


class Solution {
    public int[] diStringMatch(String s) {
        int n=s.length(),I=0,D=n,i=0;
        int arr[]=new int[n+1];
        for(char c : s.toCharArray()){
            arr[i++]=(c=='I' ? I++ : D--);
        }
        arr[n]=I;
        return arr;
    }
}



class Solution {
    public int[] diStringMatch(String s) {
        int n = s.length();
        int[] res = new int[n+1];
        int st=0,en=n;
        
        int pos=0;
        while(pos<n){
            if(s.charAt(pos)=='I')
                res[pos++]=st++;
            else{
                res[pos++]=en--;
            }
        }
        res[pos]=st;
        return res;
    }
}
