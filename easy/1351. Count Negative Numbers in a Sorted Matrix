Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.

Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0

 

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 100
    -100 <= grid[i][j] <= 100

 
Follow up: Could you find an O(n + m) solution?


class Solution {
    public int countNegatives(int[][] grid) {
        int result = 0;
        for(int[] g : grid)
            result += binarySearch(g);
        return result;
    }
    
    private int binarySearch(int[] row){
        int left = 0, right = row.length - 1;
        while(left <= right){
            int pivot = left + (right - left)/2;
            if(row[pivot]<0)
                right = pivot - 1;
            else 
                left = pivot + 1;
        }
        return row.length - left;
    }
}


class Solution {
    public int countNegatives(int[][] grid) {
        int r=grid.length;
        int c = grid[0].length;
        int i=0,j=c-1;
        int negs=0;
        while(i<r && j>=0){
            if(grid[i][j]<0){
                negs+=(r-i);
                j--;
            }else
                i++;
        }
        return negs;
    }
}



class Solution {
    public int countNegatives(int[][] grid) {
        int count=0;
        for(int i=0;i< grid.length;i++){
            for(int j=0;j< grid[0].length;j++){
                if(grid[i][j]<=-1){
                    count++;
                }
            }
        }
        return count;
    }
}
