Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.

The array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).

 

Example 1:

Input: nums = [1,2,10,5,7]
Output: true
Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].
[1,2,5,7] is strictly increasing, so return true.

Example 2:

Input: nums = [2,3,1,2]
Output: false
Explanation:
[3,1,2] is the result of removing the element at index 0.
[2,1,2] is the result of removing the element at index 1.
[2,3,2] is the result of removing the element at index 2.
[2,3,1] is the result of removing the element at index 3.
No resulting array is strictly increasing, so return false.

Example 3:

Input: nums = [1,1,1]
Output: false
Explanation: The result of removing any element is [1,1].
[1,1] is not strictly increasing, so return false.

 

Constraints:

    2 <= nums.length <= 1000
    1 <= nums[i] <= 1000



class Solution {
    public boolean canBeIncreasing(int[] nums) {
        final int n = nums.length;
        boolean remove = nums[0] >= nums[1];
        for (int i = 2; i < n; i++) {
            if (nums[i - 1] >= nums[i]) {
                if (remove) {
                    return false;
                }
                remove = true;
                if (nums[i - 2] >= nums[i]) {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return true;
    }
}




class Solution {
    public boolean canBeIncreasing(int[] nums) {
          int flag=0;
        for (int i = 1; i <nums.length ; i++) {
            if(nums[i]<=nums[i-1]){
                if(i+1<nums.length){
                        flag=1;
                    }else {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}



class Solution {
    public boolean canBeIncreasing(int[] nums) {
        // int max=-1,secmax=-1;
        // for(int i=0;i<nums.length;i++){
        //     if(nums[i]>max){
        //         secmax=max;
        //         max=nums[i];
        //     }else if(max!=nums[i] && nums[i]>secmax){
        //         secmax=nums[i];
        //     }else{
        //         return false;
        //     }
        // }
        // return ;
        boolean canRemoveItem = true;
        int last=nums[0];
        for(int i=1;i<nums.length;i++){
            if(nums[i]<=last){
                // we did not remove any item before
                if(canRemoveItem){
                    canRemoveItem=false;
                  
                    // if i is the last item just remove it
                    if(i==nums.length-1) return true;
                    // can remove item at index i
                    if(nums[i+1]>nums[i-1]){
                        last=nums[i-1];
                    // can remove item at index i-1
                    }else if(nums[i+1]>nums[i] && (i-2<0 || nums[i]>nums[i-2])){
                        last=nums[i];
                    }else {
                        return false;
                    }
                    
                }else{
                    return false;
                }
            }else{
                last=nums[i];
            }
        }
        
        return true;
    }
}
