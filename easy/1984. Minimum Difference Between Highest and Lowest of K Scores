You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.

Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.

Return the minimum possible difference.

 

Example 1:

Input: nums = [90], k = 1
Output: 0
Explanation: There is one way to pick score(s) of one student:
- [90]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.

Example 2:

Input: nums = [9,4,1,7], k = 2
Output: 2
Explanation: There are six ways to pick score(s) of two students:
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.

 

Constraints:

    1 <= k <= nums.length <= 1000
    0 <= nums[i] <= 105



class Solution {
    public int minimumDifference(int[] nums, int k) {
        Arrays.sort(nums);
        int l = 0, r = k - 1, n = nums.length;
        int diff = Integer.MAX_VALUE, min = 0;
        while(r < n){
            min = nums[r] - nums[l];
            diff = Math.min(min, diff);
            l++;
            r++;
        }
        return diff;
    }
}




class Solution {
    public int minimumDifference(int[] nums, int k) {
        
        Arrays.sort(nums);
        
        int difference = Integer.MAX_VALUE;
        
        for(int i = 0 ; i <= nums.length - k; i++){
            if(nums[i + k - 1] - nums[i] < difference){
                difference = nums[i + k - 1] - nums[i];
            }
        }
        return difference;
    }
}



class Solution {
    public int minimumDifference(int[] a, int k) {
        Arrays.sort(a);
        int n=a.length;
        int l=0,r=k-1;
        int minn=Integer.MAX_VALUE;
        int dif=0;
        while(r<n)
        {
           dif=a[r]-a[l]; 
            l++;
            r++;
           minn=Math.min(minn,dif); 
        }
        return minn;
        }
       
}




class Solution {
    public int minimumDifference(int[] nums, int k) {
        Arrays.sort(nums);
        int min=11111111;
        for(int i=0;i<=nums.length-k;i++){
            int temp=(nums[i+k-1]-nums[i]);
            if(min>temp)
                min=temp;
                
    
        }
        return min;
    }
    
}
