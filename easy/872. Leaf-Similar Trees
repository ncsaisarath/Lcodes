Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Example 1:

Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true

Example 2:

Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false

 

Constraints:

    The number of nodes in each tree will be in the range [1, 200].
    Both of the given trees will have values in the range [0, 200].



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> list = new ArrayList<>();

    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        
        
       List <Integer> list1 = leafList(root1);
        list = new ArrayList<Integer>();
        List <Integer> list2 = leafList(root2);
        if(list1.size()!=list2.size())
            return false;
        for(int i=0;i<list1.size();i++)
        {
            if(list1.get(i)!=list2.get(i))
                return false;
        }
        return true;
    }
    
    public List<Integer> leafList(TreeNode root)
    {
           if(root==null)
               return new ArrayList<Integer>() ;
           if(root.left==null && root.right==null)
           { 
               list.add(root.val);
                return list;
           }
        
        leafList(root.left);
        leafList(root.right);
        
        return list;
    }
}



class Solution {
    ArrayList<Integer> a1,a2;
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        a1 = new ArrayList<>();
        a2 = new ArrayList<>();
        dfs1(root1);
        dfs2(root2);
        if(a1.size()!=a2.size())
            return false;
        for(int i=0;i<a1.size();i++){
            if(a1.get(i)!=a2.get(i))
                return false;
        }
        return true;
    }
    
    public void dfs1(TreeNode root){
        if(root==null)
            return;
        dfs1(root.left);
        if(root.left==null && root.right==null)
            a1.add(root.val);
        dfs1(root.right);
    }
    
    public void dfs2(TreeNode root){
        if(root==null)
            return;
        dfs2(root.left);
        if(root.left==null && root.right==null)
            a2.add(root.val);
        dfs2(root.right);
    }
}
