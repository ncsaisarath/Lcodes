Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.

The value of |x| is defined as:

    x if x >= 0.
    -x if x < 0.

 

Example 1:

Input: nums = [1,2,2,1], k = 1
Output: 4
Explanation: The pairs with an absolute difference of 1 are:
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]

Example 2:

Input: nums = [1,3], k = 3
Output: 0
Explanation: There are no pairs with an absolute difference of 3.

Example 3:

Input: nums = [3,2,1,5,4], k = 2
Output: 3
Explanation: The pairs with an absolute difference of 2 are:
- [3,2,1,5,4]
- [3,2,1,5,4]
- [3,2,1,5,4]

 

Constraints:

    1 <= nums.length <= 200
    1 <= nums[i] <= 100
    1 <= k <= 99




class Solution {
    public int countKDifference(int[] nums, int k) {
        int[] hist = new int[101];
        for(int num : nums)
            ++hist[num];
        int res = 0;
        for(int i = 1; i <= 100 - k; ++i){
            res += hist[i] * hist[i+k];
        }
        return res;
    }
}



class Solution {
    public int countKDifference(int[] nums, int k) {
        var n = nums.length;
        var ans = 0;

        var counts = new int[100 + 1];
        for (var num : nums) {
            if (num > k) ans += counts[num - k]; // [1,2], k=1
            if (num + k < 101) ans += counts[k + num]; // [2,1], k=1 
            counts[num]++;
        }
        return ans;
        
//         int ans =0;
        
//          HashMap<Integer,Integer> count = new HashMap<Integer,Integer>();
        
//         for(int i =0; i<nums.length;i++){
//             if(count.containsKey(nums[i]-k)){
//                 ans+= count.get(nums[i]-k);
//             }else if(count.containsKey(k+nums[i])){
//                 ans+= count.get(k+nums[i]);
//             }
//             count.put(nums[i], count.getOrDefault(nums[i],0)+1);
//         }
        
//         return ans;
        
        
        
        
        
        
        
        
        
        //o(N^2)
//         int count =0;
        
//         for(int i=0; i<nums.length;i++){
//             for(int j =i+1;j<nums.length;j++){
//                 if(nums[i]- nums[j] ==k || nums[j]- nums[i] ==k ){
//                     count++;
                    
//                 }        
//             }    
       
//         }
//          return count;
    }
}




class Solution {
    public int countKDifference(int[] arr, int k) {
        int count = 0;
            
            HashMap<Integer,Integer> map = new HashMap<>();
            
            for(int val : arr){
                    
                    if(map.containsKey(val-k)){
                            count += map.get(val-k);
                    }
                    if(map.containsKey(val+k)){
                            count += map.get(val+k);
                    }
                    map.put(val,map.getOrDefault(val,0)+1);
            }
            return count;
    }
}
