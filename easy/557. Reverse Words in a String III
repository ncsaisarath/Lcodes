Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

 

Example 1:

Input: s = "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"

Example 2:

Input: s = "God Ding"
Output: "doG gniD"

 

Constraints:

    1 <= s.length <= 5 * 10^4
    s contains printable ASCII characters.
    s does not contain any leading or trailing spaces.
    There is at least one word in s.
    All the words in s are separated by a single space.

class Solution {
    public String reverseWords(String s) {
        char[] chars = s.toCharArray();
        reverse(chars, 0);
        return String.valueOf(chars);
    }

    void reverse(char[] chars, int i) {
        int l = i, r = i;
        while (r < chars.length && chars[r] != ' ') {
            r++;
        }
        
        i = r;

        while (l < --r) {
            char temp = chars[l];
            chars[l++] = chars[r];
            chars[r] = temp;
        }

        if (i < chars.length) {
            reverse(chars, i + 1);
        }
    }
}

class Solution {
    public String reverseWords(String s) {
        int l=0;
        String res="";
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)==' '){
                res=res+reverse(s.substring(l,i))+" ";
                l=i+1;
            }
        }
        res=res+reverse(s.substring(l));
        
        return res;
        
    }
    
    public String reverse(String x){
        String ss = "";
        for(int i=x.length()-1;i>=0;i--){
            ss+=x.charAt(i);
        }    
        return ss;
    }
}
