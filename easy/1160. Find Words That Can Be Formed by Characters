You are given an array of strings words and a string chars.

A string is good if it can be formed by characters from chars (each character can only be used once).

Return the sum of lengths of all good strings in words.

 

Example 1:

Input: words = ["cat","bt","hat","tree"], chars = "atach"
Output: 6
Explanation: The strings that can be formed are "cat" and "hat" so the answer is 3 + 3 = 6.

Example 2:

Input: words = ["hello","world","leetcode"], chars = "welldonehoneyr"
Output: 10
Explanation: The strings that can be formed are "hello" and "world" so the answer is 5 + 5 = 10.

 

Constraints:

    1 <= words.length <= 1000
    1 <= words[i].length, chars.length <= 100
    words[i] and chars consist of lowercase English letters.


class Solution {
    public int countCharacters(String[] words, String chars) {
        int res = 0;
        int[] f = new int[26];
        for(int i=0; i<chars.length(); i++) {
            f[chars.charAt(i)-'a']++;
        }
        for(String w: words) {
            if(isGood(w, f)) {
                res += w.length();
            }
        }
        return res;
    }
    public boolean isGood(String word, int[] f) {
        int[] wordFreq = new int[26];
        for(int i=0; i<word.length(); i++) {
            int idx = word.charAt(i) - 'a';
            wordFreq[idx]++;
            if(wordFreq[idx] > f[idx])
                return false;
        }
        return true;
    }
}



class Solution {
    public int countCharacters(String[] words, String chars) {
        int[] ch = new int[26];
        int[] temp = new int[26];
        for(char c:chars.toCharArray()){
            ch[c-'a']++;
        }
        int res=0;
        for(int i=0;i<words.length;i++){
            String word=words[i];
            temp = new int[26];
            for(char c:word.toCharArray()){
                temp[c-'a']++;
            }
            boolean canform=true;
            for(int j=0;j<26;j++){
                if(ch[j]<temp[j])
                    canform=false;
            }
            if(canform){
                res+=word.length();
            }
        }
        return res;
    }
}
