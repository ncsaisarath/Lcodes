Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

 

Constraints:

    1 <= nums.length <= 10^4
    -104 <= nums[i] <= 10^4
    nums is sorted in non-decreasing order.

 
Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?


class Solution {
    public int[] sortedSquares(int[] nums) {
        int left=0;
        int right=nums.length-1;
        int[] result = new int[nums.length];
        int index=right;
        while(left<=right){
            if(nums[left]*nums[left]>=nums[right]*nums[right]){
                result[index]=nums[left]*nums[left];
                left++;
                index--;
            }else{
                result[index]=nums[right]*nums[right];
                right--;
                index--;
            }    
        }
        return result;
    }
}


class Solution {
    public int[] sortedSquares(int[] nums) {
        int len=nums.length;
        int index = len-1;
        int[] result = new int[len];
        int left = 0;
        int right = len - 1;
        
        
        while(index >= 0) {
            if(squared(nums[left]) >= squared(nums[right])) {
                result[index] = squared(nums[left]);
                left++;
            } else {
                result[index] = squared(nums[right]);
                right--;
            }
            index--;
        }
        
        return result;
        
    }
    
    public int squared(int num) {
        return num * num;
    }
}
