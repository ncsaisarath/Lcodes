Given an array of integers arr, return true if the number of occurrences of each value in the array is unique, or false otherwise.

 

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.

Example 2:

Input: arr = [1,2]
Output: false

Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true

 

Constraints:

    1 <= arr.length <= 1000
    -1000 <= arr[i] <= 1000


class Solution {
    public boolean uniqueOccurrences(final int[] array) {
        int min = 1_000, max = -1_000;
        for (final int element: array) {
            min = Math.min(element, min);
            max = Math.max(element, max);
        }
        min = Math.abs(min);
        final int[] count = new int[min + max + 1];
        int maxCount = 0;
        for (int element : array) {
            maxCount = Math.max(++count[element + min], maxCount);
        }
        final int[] duplicates = new int[maxCount + 1];
        for (final int element: count) {
            if (element != 0 && ++duplicates[element] == 2) {
                return false;
            }
        }
        return true;
    }
}



class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        int[] counter = new int[2001];
        for(int x:arr){
            counter[x+1000]++;
        }
        Set<Integer> set = new HashSet<>();
        for(int x:counter){
            if(x>0 && set.contains(x))
                return false;
            else if(x>0)
                set.add(x);
        }
        return true;
    }
}
