You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the array after sorting it.

 

Example 1:

Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explantion: [0] is the only integer with 0 bits.
[1,2,4,8] all have 1 bit.
[3,5,6] have 2 bits.
[7] has 3 bits.
The sorted array by bits is [0,1,2,4,8,3,5,6,7]

Example 2:

Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
Output: [1,2,4,8,16,32,64,128,256,512,1024]
Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.

 

Constraints:

    1 <= arr.length <= 500
    0 <= arr[i] <= 104


class Solution {
    
    void swap(int[] arr,int i,int j){
        int temp = arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    
    int partition(int[] arr1,int[] arr2,int start,int end){
        int piviot=arr1[end];
        int piviot2= arr2[end];
        int j=start;
        
        for(int i=start;i<end;i++){
            if(arr1[i]<piviot){
                swap(arr1,i,j);
                swap(arr2,i,j);
                j++;
            }
            else if(arr1[i]==piviot && arr2[i]<piviot2){
                 swap(arr1,i,j);
                swap(arr2,i,j);
                j++;
            }
        }
        swap(arr1,end,j);
        swap(arr2,end,j);
        return j;
    }
    
    void quickSort(int[] arr1,int[] arr2, int s,int e){
        if(s<e){
            int p = partition(arr1,arr2,s,e);
            
            quickSort(arr1,arr2,s,p-1);
            quickSort(arr1,arr2,p+1,e);
        }
    }
    
    public int[] sortByBits(int[] arr) {
        int[] bits = new int[arr.length];
        
        for(int i=0;i<arr.length;i++){
            bits[i]=Integer.bitCount(arr[i]);
        }
        
        quickSort(bits,arr,0,arr.length-1);
        
        return arr;
    }
}


class Solution {
    class Myint implements Comparable<Myint>{
        int item;
        Myint(int item){
            this.item=item;
        }
        public int compareTo(Myint b){
            int x=Integer.bitCount(this.item);
            int y=Integer.bitCount(b.item);
            if(x!=y){
                return x-y;
            }
            return this.item-b.item;
        }
    }
    public int[] sortByBits(int[] arr) {
        Myint[] arrs = new Myint[arr.length];
        int pos=0;
        for(int x:arr){
            arrs[pos++]=new Myint(x);
        }
        Arrays.sort(arrs);
        int[] res=new int[arr.length];
        pos=0;
        for(Myint x:arrs)
            res[pos++]=x.item;
        return res;
    }
}
