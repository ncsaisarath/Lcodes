Given an integer array nums of size n, return the number with the value closest to 0 in nums. If there are multiple answers, return the number with the largest value.

 

Example 1:

Input: nums = [-4,-2,1,4,8]
Output: 1
Explanation:
The distance from -4 to 0 is |-4| = 4.
The distance from -2 to 0 is |-2| = 2.
The distance from 1 to 0 is |1| = 1.
The distance from 4 to 0 is |4| = 4.
The distance from 8 to 0 is |8| = 8.
Thus, the closest number to 0 in the array is 1.

Example 2:

Input: nums = [2,-1,1]
Output: 1
Explanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.

 

Constraints:

    1 <= n <= 1000
    -10^5 <= nums[i] <= 10^5



class Solution {
    public int findClosestNumber(int[] nums) {
        int min=Integer.MAX_VALUE;
        int result = 0;
        for(int i:nums){
            if(Math.abs(i) < min) {
                min = Math.abs(i)-0;
                result = i;
            }else if(i == min){
                result = i;
            }
        }
        return result;
    }
}




class Solution {
    public int findClosestNumber(int[] nums) {
        
        int dis = Math.abs(nums[0]) - 0;
        int data = nums[0];
        
        int n = nums.length;
        for(int i = 1; i < n;i++)
        {
            int x = Math.abs(nums[i]) - 0; 
            if(x < dis)
            {
                dis  = x;
                data = nums[i];
            }
            else if(x == dis)
            {
                if(data < nums[i])
                {
                    dis = x;
                    data = nums[i];
                }
            }
        }
        return data;
    }
}



class Solution {
    public int findClosestNumber(int[] nums) {
        int min = -100000;
	int max = 100001;
	for(int num : nums) {
		if(num < 0) min = Math.max(min, num);
		else max = Math.min(max, num);
	}
	if(-min == max) return max;
	if(-min < max) return min;
	else return max;
    }
}
