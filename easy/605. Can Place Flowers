You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.

 

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: true

Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: false

 

Constraints:

    1 <= flowerbed.length <= 2 * 10^4
    flowerbed[i] is 0 or 1.
    There are no two adjacent flowers in flowerbed.
    0 <= n <= flowerbed.length


class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if (n==0) {return true;}
        if (flowerbed.length == 1) {
            return n == 1 && flowerbed[0]==0 ? true : false;
        }
        if (flowerbed.length == 2) {
            return n == 1 && flowerbed[0]==0 && flowerbed[1]==0 ? true : false;
        }
        
        //first case
        if (flowerbed[0]==0 && flowerbed[1]==0) {
            flowerbed[0] = 1;
            n--;
        }

        for (int i=2; i < flowerbed.length; i++) {
            if (flowerbed[i]==0 && flowerbed[i-1]==0 && flowerbed[i-2]==0) {
                flowerbed[i-1] = 1;
                n--;
            }
            if (n<=0) {return true;}
        }
        
        //last case
        
        if (flowerbed[flowerbed.length-2]==0 && flowerbed[flowerbed.length-1]==0) {
            flowerbed[flowerbed.length-1] = 1;
            n--;
        }
        
        
        return n<=0;
    }
}

class Solution2 {
    boolean res = false;
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        solve(flowerbed,0,n);
        return res;
    }
    
    public void solve(int[] flowers, int pos, int n){
        if(n==0){
            res=true;
            return;
        }
        if(pos>=flowers.length){
            return;
        }
        if(flowers[pos]==1){
            solve(flowers,pos+2,n);
        }else if((pos+1<flowers.length && flowers[pos+1]==0)||pos==flowers.length-1){
            solve(flowers,pos+2,n-1);
        }else
            solve(flowers,pos+1,n);
    }
}
