Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

 

Example 1:

Input: n = 16
Output: true

Example 2:

Input: n = 5
Output: false

Example 3:

Input: n = 1
Output: true

 

Constraints:

    -2^31 <= n <= 2^31 - 1

 
Follow up: Could you solve it without loops/recursion?

class Solution {
    public boolean isPowerOfFour(int n) {
        if(n<=0){
            return false;
        }
        if(n==1){
            return true;
        }
        if(n%4==0){
            return isPowerOfFour(n/4);
        }
        return false;
    }
}

class Solution2 {
    public boolean isPowerOfFour(int num) {
        if(num <= 0) return false;
        double logValue = Math.log(num)/Math.log(4);
        return (logValue % 1) == 0 ;
    }
}

class Solution3 {
    public boolean isPowerOfFour(int n) {
        if(n==0)
            return false;
        if(n==1)
            return true;
        while(n%4==0)
            n/=4;
        return n==1;
    }
}
