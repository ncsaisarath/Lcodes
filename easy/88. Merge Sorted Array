You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i1 = m - 1, i2 = n - 1, here = m + n - 1;
        while(i1 >= 0 && i2 >= 0) {
            if(nums1[i1] >= nums2[i2]) {
                nums1[here--] = nums1[i1--];
            } else {
                nums1[here--] = nums2[i2--];
            }
        }
        while(i2 >= 0) {
            nums1[here--] = nums2[i2--];
        }
    }
}

class Solution2 {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if(n==0)
            return;
        if(m==0 && n==1){
            nums1[0]=nums2[0];
            return;
        }
            
        int[] temp=new int[m+n];
        int j=0,k=0,i=0;
        
        for(;i<m+n&&j<m&&k<n;i++){
            if(nums1[j]<nums2[k]){
                temp[i]=nums1[j];
                j++;
                
            }
            else if(nums1[j]>nums2[k]){
                temp[i]=nums2[k];
                k++;
            }else{
                temp[i]=nums1[j];
                j++;
            }
        }
        
        for(;j<m&&i<m+n;j++,i++)
            temp[i]=nums1[j];
        
        for(;k<n&&i<m+n;k++,i++)
            temp[i]=nums2[k];
        
        for(i=0;i<m+n;i++)
            nums1[i]=temp[i];
    }
        
        
}
