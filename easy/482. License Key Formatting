You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.

We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.

Return the reformatted license key.

 

Example 1:

Input: s = "5F3Z-2e-9-w", k = 4
Output: "5F3Z-2E9W"
Explanation: The string s has been split into two parts, each part has 4 characters.
Note that the two extra dashes are not needed and can be removed.

Example 2:

Input: s = "2-5g-3-J", k = 2
Output: "2-5G-3J"
Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.

 

Constraints:

    1 <= s.length <= 10^5
    s consists of English letters, digits, and dashes '-'.
    1 <= k <= 10^4

class Solution {
	public String licenseKeyFormatting(String s, int k) {
		char[] c = s.toCharArray();
		int n = c.length;
		int count = 0;
		int len = n + n / k;
		char[] res = new char[len];
		int j = len;

		char t = 0;
		for (int i = n - 1; i >= 0; i--) {
			t = c[i];
			if (t == '-') {
				continue;
			}

			if (t >= 'a' && t <= 'z') {
				res[--j] = (char)(t - 32);
			}
			else {
				res[--j] = t;
			}

			if (++count == k) {
				res[--j] = '-';
				count = 0;
			}
		}

		if (j == len) {
			return "";
		}

		if (res[j] == '-') {
			return new String(res, j + 1, len - (j + 1));
		}

		return new String(res, j, len - j);
	}
}

class Solution2 {
    public String licenseKeyFormatting(String s, int k) {
        StringBuilder sb = new StringBuilder();
        int temp = 0;
        boolean appe = false;
        for(int i=s.length()-1;i>=0;i--){
            if(s.charAt(i)!='-'){
                if(appe){
                    sb.append('-');
                    appe=false;
                }
                sb.append(s.charAt(i));
                temp++;
            }
            if(temp==k && i-1>=0){
                    appe=true;
                    temp=0;
            }
            
        }
        String res = sb.reverse().toString().toUpperCase();
        return res;
    }
}
