Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.

 

Example 1:

Input: s = "dfa12321afd"
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.

Example 2:

Input: s = "abc1111"
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 

 

Constraints:

    1 <= s.length <= 500
    s consists of only lowercase English letters and/or digits.


class Solution {
    public int secondHighest(String s) {
        int k=2;
        for(char i='9';i>='0';i--)
        {
            if(s.indexOf(i)>-1)
                k--;
            if(k==0)
                return i-'0';
        }
        return -1;
    }
}



class Solution {
    public int secondHighest(String s) {
        int max1 = -1;
        int max2 = -1;
        
        for(int i = 0; i < s.length(); i++)
        {
            char alphaNum = s.charAt(i);
            
            if(Character.isDigit(alphaNum))
            {
                int digit = alphaNum - '0';
                
                if(digit > max1)
                {
                    max2 = max1;
                    max1 = digit;
                }
                
                else if(digit > max2 && digit != max1)
                {
                    max2 = digit;
                }
            }
        }
        
        return max2;
    }
}



class Solution {
    public int secondHighest(String s) {
        int max=-1,secmax=-1;
        for(int i=0;i<s.length();i++){
            char c = s.charAt(i);
            if(Character.isDigit(c)){
                int x=(int)(c-'0');
                if(x>max){
                    secmax=max;
                    max=x;
                }else if(x!=max && x>secmax){
                    secmax=x;
                }
            }
        }
        return secmax;
    }
}
