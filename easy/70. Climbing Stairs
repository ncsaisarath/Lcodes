You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

class Solution {
    public int climbStairs(int n) {
        if(n<=2) return n;
        
        int dp[] = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i=3;i<=n;i++){
            dp[i] = dp[i-2] + dp[i-1];
        }
        
        return dp[n];
    }
}

class Solution2 {
    public int climbStairs(int n) {
        
        if(n<=3)
            return n;
        int count=0;
        int[] lookup = new int[n+1];
        lookup[0]=1;
        lookup[1]=1;
        lookup[2]=2;
       
        for(int i=3;i<=n;i++){
            
            for(int j=1;j<=2&&(i-j)>=0;j++)
                lookup[i]+=lookup[i-j];
        }
        
        return  lookup[n];
            
    }
}
