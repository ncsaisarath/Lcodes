You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:

    Letter-logs: All words (except the identifier) consist of lowercase English letters.
    Digit-logs: All words (except the identifier) consist of digits.

Reorder these logs so that:

    The letter-logs come before all digit-logs.
    The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
    The digit-logs maintain their relative ordering.

Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
Explanation:
The letter-log contents are all different, so their ordering is "art can", "art zero", "own kit dig".
The digit-logs have a relative order of "dig1 8 1 5 1", "dig2 3 6".

Example 2:

Input: logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]

 

Constraints:

    1 <= logs.length <= 100
    3 <= logs[i].length <= 100
    All the tokens of logs[i] are separated by a single space.
    logs[i] is guaranteed to have an identifier and at least one word after the identifier.



class Solution {
    
    private static class LetterLog implements Comparable<LetterLog> {
        private final String id, content, log;
        LetterLog(String id, String content, String log) {
            this.id = id;
            this.content = content;
            this.log = log;
        }
        
        public int compareTo(LetterLog other) {
            int diff = content.compareTo(other.content);
            if (diff == 0) {
                return id.compareTo(other.id);
            } else {
                return diff;
            }
        }
    }
    public String[] reorderLogFiles(String[] logs) {
        List<String> digitlogs = new ArrayList<>();
        List<LetterLog> letterlogs = new ArrayList<>();
        for (String log : logs) {
            char last = log.charAt(log.length() - 1);
            if (last >= '0' && last <= '9') {
                digitlogs.add(log);
            } else {
                int index = log.indexOf(' ');
                letterlogs.add(new LetterLog(log.substring(0, index), log.substring(index), log));
            }
        }
        Collections.sort(letterlogs);
        String[] ans = new String[logs.length];
        int index = 0;
        for (LetterLog log : letterlogs) {
            ans[index++] = log.log;
        }
        for (String log : digitlogs) {
            ans[index++] = log;
        }
        return ans;
    }
}



class Solution {
    class Log implements Comparable<Log>{
        int code;
        String identifier;
        String content;
        
        Log(int code,String i,String c){
            this.code=code;
            this.identifier=i;
            this.content=c;
        }
        
        @Override
        public int compareTo(Log b){
      
            if(this.code==0 && b.code==0){
                if(!this.content.equals(b.content))
                    return this.content.compareTo(b.content);
                else
                    return this.identifier.compareTo(b.identifier);
            }else if(this.code==0 && b.code>0)
                return -b.code;
            else{
                return this.code-b.code;
            }
            
            
        }
        @Override
        public String toString(){
            return this.identifier+" "+this.content;
        }
    }
    public String[] reorderLogFiles(String[] logs) {
        Log[] mylogs = new Log[logs.length];
        int counter=1;
        for(int i=0;i<logs.length;i++){
            String log = logs[i];
            int pos = log.indexOf(" ");
            if(Character.isDigit(log.charAt(log.length()-1))){
                mylogs[i] = new Log(counter++,log.substring(0,pos),log.substring(pos+1,log.length()));
            }else{
                mylogs[i] = new Log(0,log.substring(0,pos),log.substring(pos+1,log.length()));
            }
        }
        Arrays.sort(mylogs);
        String[] res = new String[logs.length];
        int i=0;
        for(Log l:mylogs){
            res[i++]=l.toString();
        }
        return res;
    }
}
