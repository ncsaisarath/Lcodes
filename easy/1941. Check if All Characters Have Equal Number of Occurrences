Given a string s, return true if s is a good string, or false otherwise.

A string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).

 

Example 1:

Input: s = "abacbc"
Output: true
Explanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.

Example 2:

Input: s = "aaabb"
Output: false
Explanation: The characters that appear in s are 'a' and 'b'.
'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.

 

Constraints:

    1 <= s.length <= 1000
    s consists of lowercase English letters.



class Solution {
  public boolean areOccurrencesEqual(String s) {
    final char a = 'a';

    int[] freq = new int[26];
    
    for (char c: s.toCharArray()) {
      freq[c - a] ++;
    }
    
    
    int firstLetterFreq = freq[s.charAt(0) - a];
    
    for (int i = 0; i < freq.length; i ++) {
      if (freq[i] > 0 && firstLetterFreq != freq[i]) {
        return false;
      }
    }
    
    return true;
  }
}




class Solution {
    public boolean areOccurrencesEqual(String s) {
        int[] map = new int[26];
        for(char c : s.toCharArray()){
            map[c - 'a']++;
        }
        
        int freq = map[s.charAt(0) - 'a'];
        for(int i=0; i<26; i++){
            if(map[i] != 0 && map[i] != freq) return false;
        }
        return true;
    }
}



class Solution {
    public boolean areOccurrencesEqual(String s) {
        int[] count=new int[26];
        int val=0;
        for(char x:s.toCharArray()){
            count[x-'a']++;
            val=count[x-'a'];
        }
        if(val==0)
            return true;
        for(int i=0;i<26;i++){
            if(count[i]>0 && count[i]!=val)
                return false;
        }
        return true;
    }
}
