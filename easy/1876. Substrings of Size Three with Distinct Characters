A string is good if there are no repeated characters.

Given a string s​​​​​, return the number of good substrings of length three in s​​​​​​.

Note that if there are multiple occurrences of the same substring, every occurrence should be counted.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: s = "xyzzaz"
Output: 1
Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". 
The only good substring of length 3 is "xyz".

Example 2:

Input: s = "aababcabc"
Output: 4
Explanation: There are 7 substrings of size 3: "aab", "aba", "bab", "abc", "bca", "cab", and "abc".
The good substrings are "abc", "bca", "cab", and "abc".

 

Constraints:

    1 <= s.length <= 100
    s​​​​​​ consists of lowercase English letters.




class Solution {
    public int countGoodSubstrings(String s) {
        int k=3;
        int n=s.length();
        int x=0;
        int y=0;
        char a[]=s.toCharArray();
            for(int j=0;j<n-k+1;j++)
            {
               
                
                    if((a[j]!=a[j+1]) && a[j]!=a[j+2] && a[j+1]!=a[j+2])
                    
                 y++;
                
                
            }
          return y;
                
             
       // return 0;
    }
}



class Solution {
    public int countGoodSubstrings(String s) {
        int result = 0;
        for(int i=1;i<s.length()-1;i++)
            if(s.charAt(i-1) != s.charAt(i) && s.charAt(i+1) != s.charAt(i) && s.charAt(i+1) != s.charAt(i-1))
                result++;
        return result;
    }
}



class Solution {
    public int countGoodSubstrings(String s) {
        int n=s.length();
        int count=0;
        int[] ch = new int[26];
        int c=0;
        for(int i=0;i<=2 && i<n;i++){
            if(ch[s.charAt(i)-'a']==0)
                c++;
            ch[s.charAt(i)-'a']++;
        }
        if(c==3)
            count++;
        for(int i=1;i<=n-3;i++){
            
            ch[s.charAt(i-1)-'a']--;
            ch[s.charAt(i+2)-'a']++;
            int j=0;
            for(j=0;j<26;j++){
                if(ch[j]>1)
                    break;
            }
            if(j==26)
                count++;
           
        
        }
        return count;
    }
}
