Given an integer n, return true if n has exactly three positive divisors. Otherwise, return false.

An integer m is a divisor of n if there exists an integer k such that n = k * m.

 

Example 1:

Input: n = 2
Output: false
Explantion: 2 has only two divisors: 1 and 2.

Example 2:

Input: n = 4
Output: true
Explantion: 4 has three divisors: 1, 2, and 4.

 

Constraints:

    1 <= n <= 104



class Solution {
    public boolean isThree(int n) {
     int cnt = 1;
        for (int i = 1; i <= n/2; i++) {
            if (n % i == 0) {
                cnt++;
                if (cnt > 3) {
                    return false;
                }
            }
        }
        return cnt == 3;
    }
}



class Solution {
    public boolean isThree(int n) {
        int cnt = 0;
        for (int i = 1; i * i <= n; i++) {
            if(n % i == 0){
                cnt += i == n / i ? 1 : 2;
            }
        }
        return cnt == 3;
    }
}



class Solution {
    public boolean isThree(int n) {
        int divisorCount = 0;
        for(int i = n; i > 0; i--) {
            if(n % i == 0) {
                divisorCount++;
            }
            
            if(divisorCount > 3) {
                return false;
            }
        }
        
        return divisorCount == 3;
    }
}



class Solution {
    public boolean isThree(int n) {
        if(n==1)
            return false;
        boolean[] primes=new boolean[100];
        primes[2]=true;
        for(int i=3;i<=100;i+=2){
            primes[i]=true;
            for(int j=2;j<=Math.sqrt(i);j++){
                if(primes[j] && i%j==0){
                    primes[i]=false;
                    break;
                }      
            }
        }
        HashSet<Integer> set = new HashSet<>();
        set.add(4);
        for(int i=3;i<=100;i+=2){
            if(primes[i])
                set.add(i*i);
        }
        if(set.contains(n))
            return true;
        return false;
    }
}
