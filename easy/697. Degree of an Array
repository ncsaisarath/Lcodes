Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.

Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.

 

Constraints:

    nums.length will be between 1 and 50,000.
    nums[i] will be an integer between 0 and 49,999.


class Solution {
    public int findShortestSubArray(int[] nums) {
        
        // use sliding window techniques
        int n = nums.length;
        int[] dp = new int[50000];
        int maxFreq = 1;
        for (int i = 0; i < n; i++) {
            dp[nums[i]]++;
            maxFreq = Math.max(maxFreq, dp[nums[i]]);
        }
        
        int[] window = new int[50000];
        int len = n;
        int j = 0;
        for (int i = 0; i < n; i++) {
            window[nums[i]]++;
            while (window[nums[i]] == maxFreq){
                //contract window;
                len = Math.min(len, i - j + 1);
                window[nums[j++]]--;
            }
        }
        
        return len;
    }
}


class Solution2 {
    public int findShortestSubArray(int[] nums) {
        if(nums.length==1)
            return 1;
        HashMap<Integer,Integer> map = new HashMap<>();
        int max=0;
        ArrayList<Integer> arr = new ArrayList<>();
        for(int x:nums){
            int temp=map.getOrDefault(x,0)+1;
            map.put(x,temp);
            if(max<temp){
                max=temp;
                arr=new ArrayList<>();
            }
            if(max==temp)
                arr.add(x);
        }
        int res=nums.length*2;
        for(int x:arr){
            int s=0,e=nums.length-1;
            while(s<e){
                while(s<e && nums[s]!=x)
                    s++;
                while(s<e && nums[e]!=x)
                    e--;
                int len=e-s+1;
                res = Math.min(res,len);
                break;
            }
        }
        return res;
        
    }
}
