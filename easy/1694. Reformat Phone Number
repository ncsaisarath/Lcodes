You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.

You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:

    2 digits: A single block of length 2.
    3 digits: A single block of length 3.
    4 digits: Two blocks of length 2 each.

The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.

Return the phone number after formatting.

 

Example 1:

Input: number = "1-23-45 6"
Output: "123-456"
Explanation: The digits are "123456".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".
Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is "456".
Joining the blocks gives "123-456".

Example 2:

Input: number = "123 4-567"
Output: "123-45-67"
Explanation: The digits are "1234567".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".
Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are "45" and "67".
Joining the blocks gives "123-45-67".

Example 3:

Input: number = "123 4-5678"
Output: "123-456-78"
Explanation: The digits are "12345678".
Step 1: The 1st block is "123".
Step 2: The 2nd block is "456".
Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is "78".
Joining the blocks gives "123-456-78".

 

Constraints:

    2 <= number.length <= 100
    number consists of digits and the characters '-' and ' '.
    There are at least two digits in number.



class Solution {
    public String reformatNumber(String number) {
        char[] cs = number.toCharArray();
        int n = cs.length;
        
        List<char[]> list = new ArrayList<>();
        
        int cnt = 0;
        char[] block = new char[3];
        
        for ( int i = 0; i < n; i++ ) {
            
            if ( cs[i] == ' ' ) continue;
            if ( cs[i] == '-' ) continue;
            
            block[cnt++] = cs[i];
            if ( cnt == 3 ) {
                list.add(block.clone());
                cnt = 0;
            }
            
        }
        
        StringBuilder sb = new StringBuilder();
        if ( cnt == 0 ) {
            for ( char[] bk : list ) {
                for ( int i = 0; i < 3; i++ ) sb.append(bk[i]);
                sb.append("-");
            }
            sb.setLength(sb.length()-1);
        } else if ( cnt == 2 || cnt == 3) {
            for ( char[] bk : list ) {
                for ( int i = 0; i < 3; i++ ) sb.append(bk[i]);
                sb.append("-");
            }
            for ( int i = 0; i < cnt; i++ ) sb.append(block[i]);
        } else if ( cnt == 1 ) {
            char[] lt = list.get(list.size()-1);
            list.remove(list.size()-1);
            for ( char[] bk : list ) {
                for ( int i = 0; i < 3; i++ ) sb.append(bk[i]);
                sb.append("-");
            }
            sb.append(lt[0]);
            sb.append(lt[1]);
            sb.append("-");
            sb.append(lt[2]);
            sb.append(block[0]);
        }
        
        return sb.toString();
    }
}



class Solution {
    public String reformatNumber(String number) {
              number = number.replace("-","");
        number = number.replace(" ","");
        StringBuilder sb = new StringBuilder();
        int cnt = 0;
        int r = number.length() % 3;
        for (int i = 0; i < number.length(); i++) {
            if ((r == 1 && number.length() - i < 4) || (r == 2 && number.length() - i < 2)) {
                if (cnt == 2) {
                    sb.append("-");
                    cnt = 0;
                }
                sb.append(number.charAt(i));
                cnt++;
            } else {
                if (cnt == 3) {
                    sb.append("-");
                    cnt = 0;
                }
                sb.append(number.charAt(i));
                cnt++;
            }
        }

        return String.valueOf(sb);
    }
}



class Solution 
{
    public String reformatNumber(String number) 
    {
        String s = number.replaceAll("[ -]","");   
        int l = s.length();
        String res="";
        if(l%3==0)
        {
            int c=0;
            for(int i=0;i<l;i++)
            {
                c++;
                if(c%3==0)
                    res = res+s.charAt(i)+"-";
                else
                    res = res+s.charAt(i);
            }
            if(res.endsWith("-"))
                res=res.substring(0,res.length()-1);
        }
        else if(l%3==1)
        {
            String p = s.substring(0,s.length()-4);
            String rem = s.substring(s.length()-4,s.length());
            System.out.println(rem);
            int c=0;
            int d=0;
            for(int i=0;i<l-4;i++)
            {
                c++;
                if(c%3==0)
                    res = res+s.charAt(i)+"-";
                else
                    res = res+s.charAt(i);
            }
            for(int i=0;i<4;i++)
            {
                d++;
                if(d%2==0)
                     res = res+rem.charAt(i)+"-";
                else
                    res = res+rem.charAt(i);
            }
            if(res.endsWith("-"))
                res=res.substring(0,res.length()-1);
        }
        else
        {
            int c=0;
            for(int i=0;i<l-2;i++)
            {
                c++;
                if(c%3==0)
                    res = res+s.charAt(i)+"-";
                else
                    res = res+s.charAt(i);
            }
            res= res+s.substring(s.length()-2,s.length());
        }
        return res;
    }
}
