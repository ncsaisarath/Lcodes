Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.

A subarray is defined as a contiguous sequence of numbers in an array.

A subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi < numsi+1. Note that a subarray of size 1 is ascending.

 

Example 1:

Input: nums = [10,20,30,5,10,50]
Output: 65
Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.

Example 2:

Input: nums = [10,20,30,40,50]
Output: 150
Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.

Example 3:

Input: nums = [12,17,15,13,10,11,12]
Output: 33
Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.

 

Constraints:

    1 <= nums.length <= 100
    1 <= nums[i] <= 100


class Solution {
    public int maxAscendingSum(int[] nums) {
        int i = 0;
        int ans = 0;
        int sum = 0;
        while(i < nums.length)
        {
            if(i == 0)
                sum += nums[i];
            else
            {
                if(nums[i] < nums[i-1])
                {
                    ans = Math.max(ans, sum);
                    sum = nums[i];
                }
                else if(nums[i] == nums[i-1])
                    sum = nums[i];
                else
                    sum += nums[i];
            }
            
            ans = Math.max(ans, sum);
            //System.out.println("At " + nums[i] + ", max sum : " + ans + ", current sum : " + sum );
            i += 1;
        }
        return ans;
    }
}



class Solution {
    public int maxAscendingSum(int[] nums) {
        int n=nums.length,max=-1;
        for(int i=0;i<n-1;i++){
            max = Math.max(max,nums[i]);
            if(nums[i+1]>nums[i]){
                int sum=nums[i];
                while(i+1<n && nums[i+1]>nums[i]){
                    sum+=nums[i+1];
                    i++;
                }
                if(sum>max)
                    max=sum;
                i--;
            }
        }
        return max>nums[n-1]?max:nums[n-1];
    }
}
