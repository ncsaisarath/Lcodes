You are given a string number representing a positive integer and a character digit.

Return the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. The test cases are generated such that digit occurs at least once in number.

 

Example 1:

Input: number = "123", digit = "3"
Output: "12"
Explanation: There is only one '3' in "123". After removing '3', the result is "12".

Example 2:

Input: number = "1231", digit = "1"
Output: "231"
Explanation: We can remove the first '1' to get "231" or remove the second '1' to get "123".
Since 231 > 123, we return "231".

Example 3:

Input: number = "551", digit = "5"
Output: "51"
Explanation: We can remove either the first or second '5' from "551".
Both result in the string "51".

 

Constraints:

    2 <= number.length <= 100
    number consists of digits from '1' to '9'.
    digit is a digit from '1' to '9'.
    digit occurs at least once in number.



class Solution {
    public String removeDigit(String number, char digit) {
        char[] chars = number.toCharArray();
        StringBuilder str = new StringBuilder(number);
        int position = -1;
        for (int i = 0; i < chars.length - 1; i++) {
            if (chars[i] == digit && chars[i] < chars[i + 1]) {
                position = i;
                break;
            }
        }
        if (position == -1) {
            return str.deleteCharAt(number.lastIndexOf(digit)).toString();
        } else {
            return str.deleteCharAt(position).toString();
        }
    }
}



class Solution {
    public String removeDigit(String number, char digit) {
        int index = 0,n=number.length();
        for(int i=0;i<n;i++){
            if(number.charAt(i)==digit){
                index = i;
                if(i<n-1 && digit < number.charAt(i+1)) break;
            }
        }
        number = number.substring(0, index) + number.substring(index+1);
        return number;
    }
}



class Solution {
    public String removeDigit(String s, char d) {
        StringBuilder sb=new StringBuilder(s);
        StringBuilder ans=new StringBuilder();
        for(int i=0;i<sb.length();i++)
        {
            char ch=sb.charAt(i);
            if(ch==d)
            {
                sb.deleteCharAt(i);
                if(sb.compareTo(ans)>0) ans=new StringBuilder(sb);
                sb.insert(i,ch);
            }
        }
        return ans.toString();
    }
}




class Solution {
    public String removeDigit(String number, char digit) {
        String max="-1";
        for(int i=0;i<number.length();i++){
            if(number.charAt(i)==digit){
                 String temp = (number.substring(0,i)+number.substring(i+1));
                if(max.compareTo(temp)<0)
                    max=temp;
            }
        }
        return max;
    }
}
