Given an integer array nums and an integer k, modify the array in the following way:

    choose an index i and replace nums[i] with -nums[i].

You should apply this process exactly k times. You may choose the same index i multiple times.

Return the largest possible sum of the array after modifying it in this way.

 

Example 1:

Input: nums = [4,2,3], k = 1
Output: 5
Explanation: Choose index 1 and nums becomes [4,-2,3].

Example 2:

Input: nums = [3,-1,0,2], k = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].

Example 3:

Input: nums = [2,-3,-1,5,-4], k = 2
Output: 13
Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].

 

Constraints:

    1 <= nums.length <= 10^4
    -100 <= nums[i] <= 100
    1 <= k <= 10^4



class Solution {
    public int largestSumAfterKNegations(int[] A, int K) {
  int[] cnt = new int[201];
  int res = 0;
  for (int i : A) ++cnt[i + 100];
  for (int i = -100; i <= 100 && K > 0; ++i) {
    if (cnt[i + 100] > 0) {
      int k = i < 0 ? Math.min(K, cnt[i + 100]) : K % 2;
      cnt[-i + 100] += k;
      cnt[i + 100] -= k;
      K = i < 0 ? K - k : 0;
    }
  }
  for (int i = -100; i <= 100; ++i) res += i * cnt[i + 100];
  return res;
}
    
}


class Solution {
    public int largestSumAfterKNegations(int[] nums, int k) {
        Arrays.sort(nums);
        int min = 100, sum = 0;
        for(int i = 0; i < nums.length; i++) {
          if( nums[i] < 0 && k > 0 ) {
            nums[i] = -nums[i];
            k --;
          }
          if( nums[i] < min )
            min = nums[i];
          sum += nums[i];
        }

        if( k > 0 && k % 2 != 0 )
          sum += -2*min;
        return sum;
    }
}
