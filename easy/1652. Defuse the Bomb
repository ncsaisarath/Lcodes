You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.

To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.

    If k > 0, replace the ith number with the sum of the next k numbers.
    If k < 0, replace the ith number with the sum of the previous k numbers.
    If k == 0, replace the ith number with 0.

As code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].

Given the circular array code and an integer key k, return the decrypted code to defuse the bomb!

 

Example 1:

Input: code = [5,7,1,4], k = 3
Output: [12,10,16,13]
Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.

Example 2:

Input: code = [1,2,3,4], k = 0
Output: [0,0,0,0]
Explanation: When k is zero, the numbers are replaced by 0. 

Example 3:

Input: code = [2,4,9,3], k = -2
Output: [12,5,6,13]
Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.

 

Constraints:

    n == code.length
    1 <= n <= 100
    1 <= code[i] <= 100
    -(n - 1) <= k <= n - 1


class Solution {
    public int[] decrypt(int[] code, int k) {
        
        int[] ans = new int[code.length];
        if(k==0)
        return ans;
        int start=1,end=k,sum=0;
        if(k<0)
        {
            k=-k;
            start=code.length-k;
            end=code.length-1;
        }
        for(int i=start;i<=end;i++)
            sum+=code[i];
        for(int i=0;i<code.length;i++)
        {
            ans[i]=sum;
            sum-=code[(start++)%code.length];
            sum+=code[(++end)%code.length];
        }
        return ans;
    }
}



class Solution {
    public int[] decrypt(int[] code, int k) {
        // 1. n == code.length
        // 2. 1 <= n <= 100
        // 3. 1 <= code[i] <= 100
        // 4. -(n - 1) <= k <= n - 1
        if (k == 0) {
            Arrays.fill(code, 0);
            return code;
        }

        // sliding window
        final int n = code.length;
        final int[] result = new int[n];

        int l, r, cnt, sum;
        if (k > 0) {
            l = 1; r = l; cnt = 1; sum = code[l];
        } else {
            k = -k;
            l = n - k; r = l; cnt = 1; sum = code[l];
        }

        while (cnt != k) {
            r = next(r, n);
            sum += code[r];
            cnt++;
        }

        result[0] = sum;

        int p = 0;
        while (++p < n) {
            sum -= code[l];
            l = next(l, n);
            r = next(r, n);
            sum += code[r];
            result[p] = sum;
        }

        return result;
    }

    private int next(int idx, int size) {
        return ++idx == size ? 0 : idx;
    }
}



class Solution {
    public int[] decrypt(int[] code, int k) {
        
        int n = code.length;
        int[] res = new int[n];
        if(k==0)
            return res;
        Map<Integer, Integer> map = new HashMap<>();
        int[] temp = new int[n * 2];

        for (int i = 0; i < n * 2 ; i++) {
            temp[i] = code[i % n];
        }
        int sum = 0;
        for (int i = 0; i < temp.length; i++) {
            sum += temp[i];
            map.put(i, sum);
        }

        // res = new int[code.length];
        if (k > 0) {
            for (int i = 0; i < code.length; i++) {
                res[i] = map.get(i + k) - map.get(i);
            }
        } else if (k < 0) {
            int index = 0;
            for (int i = n; i < temp.length; i++) {
                res[index++] = map.get(i - 1) - map.get(i + k - 1);
            }
        }
        return res;
        
    }
}
