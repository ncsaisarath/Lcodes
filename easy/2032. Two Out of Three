Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.

 

Example 1:

Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.

Example 2:

Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.

Example 3:

Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.

 

Constraints:

    1 <= nums1.length, nums2.length, nums3.length <= 100
    1 <= nums1[i], nums2[j], nums3[k] <= 100




class Solution {
    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {
        int[] bucket = new int[101];
        for(int i=0; i<nums1.length; i++) {
            if(bucket[nums1[i]] == 0)
                bucket[nums1[i]] = 1;
        }
        for(int i=0; i<nums2.length; i++) {
            if(bucket[nums2[i]] == 0)
                bucket[nums2[i]] = 2;
            else if(bucket[nums2[i]] == 1)
                bucket[nums2[i]] = 12;    //12 will denote that the value is present in Array 1 and 2 
        }
        for(int i=0; i<nums3.length; i++) {
            if(bucket[nums3[i]] == 1)
                bucket[nums3[i]] = 13;    //13 will denote that the value is present in Array 1 and 3
            else if(bucket[nums3[i]] == 2)
                bucket[nums3[i]] = 23;    //23 will denote that the value is present in Array 2 and 3
        }
        List<Integer> res = new ArrayList<Integer>();
        for(int i=0; i<=100; i++) 
            if(bucket[i] == 12 || bucket[i] == 13 || bucket[i] == 23)
                res.add(i);
        return res;
    }
}




class Solution {
    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {
        int[] count_nums1 = new int[101];
        int[] count_nums2 = new int[101];
        int[] count_nums3 = new int[101];
        List<Integer> res = new ArrayList<>();
        for(int n: nums1){
            count_nums1[n]++;
        }
        for(int n: nums2){
            count_nums2[n]++;
        }
        for(int n: nums3){
            count_nums3[n]++;
        }
        for(int i = 0; i < 101; i++){
            int temp_count = 0;
            if(count_nums1[i] != 0){
                temp_count++;
            }
            if(count_nums2[i] != 0){
                temp_count++;
            }
            if(count_nums3[i] != 0){
                temp_count++;
            }
            if(temp_count >= 2){
                res.add(i);
            }
        }
        return res;
    }
}




class Solution {
    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {
        Set<Integer> set1=new HashSet<>();
        Set<Integer> set2=new HashSet<>();
        List<Integer> lis=new ArrayList<>();

        for(int x:nums1)
            set1.add(x);
        boolean[] added=new boolean[101];
        for(int x:nums2){
            set2.add(x);
            if(set1.contains(x) && !added[x]){
                lis.add(x);
                added[x]=true;
            }
            
        }
        for(int x:nums3){
            if((set1.contains(x)||set2.contains(x)) && !added[x]){
                lis.add(x);
                added[x]=true;
            }
        }
            
        return lis;
    }
}
