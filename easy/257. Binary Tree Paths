Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

Example 1:

Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Example 2:

Input: root = [1]
Output: ["1"]

 

Constraints:

    The number of nodes in the tree is in the range [1, 100].
    -100 <= Node.val <= 100

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private List<String> res = new ArrayList<>();
    
    public List<String> binaryTreePaths(TreeNode root) {
        dfs(root, new StringBuilder());
        return res;
    }
    
    private void dfs(TreeNode root, StringBuilder sb) {
        if (root == null) {
            return;
        }
        
        if (sb.length() != 0) {
            sb.append("->");
        }
        sb.append(root.val);
        
        if (root.left == null && root.right == null) {
            res.add(sb.toString());
        }
        
        int len = sb.length();
        dfs(root.left, sb);
        sb.setLength(len);
        dfs(root.right, sb);
    }
}

class Solution2 {
    List<String> lis;
    public List<String> binaryTreePaths(TreeNode root) {
        lis = new ArrayList<>();
        paths(root,"");
        return lis;
    }
    
    public void paths(TreeNode root,String s){
        if(root==null) return;
        if(root.left==null && root.right==null)
            lis.add(s.concat(String.valueOf(root.val)));
        paths(root.left,s.concat(String.valueOf(root.val).concat("->")));
        paths(root.right,s.concat(String.valueOf(root.val).concat("->")));
    }
}
