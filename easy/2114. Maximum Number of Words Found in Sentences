A sentence is a list of words that are separated by a single space with no leading or trailing spaces.

You are given an array of strings sentences, where each sentences[i] represents a single sentence.

Return the maximum number of words that appear in a single sentence.

 

Example 1:

Input: sentences = ["alice and bob love leetcode", "i think so too", "this is great thanks very much"]
Output: 6
Explanation: 
- The first sentence, "alice and bob love leetcode", has 5 words in total.
- The second sentence, "i think so too", has 4 words in total.
- The third sentence, "this is great thanks very much", has 6 words in total.
Thus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.

Example 2:

Input: sentences = ["please wait", "continue to fight", "continue to win"]
Output: 3
Explanation: It is possible that multiple sentences contain the same number of words. 
In this example, the second and third sentences (underlined) have the same number of words.

 

Constraints:

    1 <= sentences.length <= 100
    1 <= sentences[i].length <= 100
    sentences[i] consists only of lowercase English letters and ' ' only.
    sentences[i] does not have leading or trailing spaces.
    All the words in sentences[i] are separated by a single space.



class Solution {
    public int mostWordsFound(String[] sentences) {
        int max = 0;
        for(String a : sentences){
            int count = 1;
            int x = a.indexOf(' ');
            while(x != -1){
                count ++;
                x = a.indexOf(' ', x + 1);
            }
            if(count > max)
                max = count;
        }
        return max;
    }
}



class Solution {
    public int countWords(String sentence) {
        int n = sentence.length();
        if (n == 0) {
            return 0;
        }
        int countEmptySpace = 0;
        for (int i = 0; i < n; i++) {
            if (sentence.charAt(i) == ' ') {
                countEmptySpace++;
            }
        }
        return countEmptySpace + 1;
    }
    public int mostWordsFound(String[] sentences) {
        int maxWords = 0;
        for (int i = 0; i < sentences.length; i++) {
            int x = countWords(sentences[i]);
            if (x > maxWords) {
                maxWords = x;
            }
        }
        return maxWords;
    }
}




class Solution {
    public int mostWordsFound(String[] sentences) {
         int ma=0;
        for(int i=0;i< sentences.length ;i++)
        {
            String sp=sentences[i];
            int sc=1;
             for(int j=0;j< sp.length();j++){
                 if(sp.charAt(j)==' '){
                     sc++;
                      }
                    if(sc>ma){
                         ma=sc;
                    
                 }                
             }
        }
        return ma;
    }
}
