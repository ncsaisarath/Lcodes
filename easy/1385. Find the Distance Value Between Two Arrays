Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

 

Example 1:

Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2
Output: 2
Explanation: 
For arr1[0]=4 we have: 
|4-10|=6 > d=2 
|4-9|=5 > d=2 
|4-1|=3 > d=2 
|4-8|=4 > d=2 
For arr1[1]=5 we have: 
|5-10|=5 > d=2 
|5-9|=4 > d=2 
|5-1|=4 > d=2 
|5-8|=3 > d=2
For arr1[2]=8 we have:
|8-10|=2 <= d=2
|8-9|=1 <= d=2
|8-1|=7 > d=2
|8-8|=0 <= d=2

Example 2:

Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3
Output: 2

Example 3:

Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6
Output: 1

 

Constraints:

    1 <= arr1.length, arr2.length <= 500
    -1000 <= arr1[i], arr2[j] <= 1000
    0 <= d <= 100



class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {
        int count =0;
        for(int i =0; i<arr1.length;i++){
            count= count+search(arr2, d, arr1[i]); 
        }
        return count;
    }
    public int search(int[] arr, int d, int key){
        int count = 0;
        for(int i =0; i<arr.length; i++){
            if(Math.abs(arr[i]-key)<=d){
                return 0;
            }                    
        }
        return 1;
    }
}



class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {
          Arrays.sort(arr2);    
        int distance = 0;
        
        for (int val : arr1) {
            if (notInRange(arr2, val - d, val + d)) {
                distance++;
            }
        }    
        
        return distance;
    }
    
    // Checks if the array doesn't contain any value in range (from <= value <= to) using binary search
    private static boolean notInRange(int[] arr, int from, int to) {
        int start = 0;
        int end = arr.length - 1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] >= from && arr[mid] <= to) {
                return false;
            } else if (arr[mid] < from) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        
        return true;

    }
}


class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {
        Arrays.sort(arr2);
        int n=arr2.length;
        int count=0;
        for(int x:arr1){
            // System.out.println(Arrays.binarySearch(arr2,x));
            
            int pos = Arrays.binarySearch(arr2,x);
            if(pos<0)
                pos=-(pos+1);
            if(pos>=n && pos!=0)
                pos--;
            if((pos==0) && Math.abs(arr2[pos]-x)<=d)
                continue;
            else if(pos==0 && Math.abs(arr2[pos]-x)>d)
                count++;
            else if(Math.abs(arr2[pos]-x)>d && Math.abs(arr2[pos-1]-x)>d)
                count++;
                
        }
        return count;
    }
}
