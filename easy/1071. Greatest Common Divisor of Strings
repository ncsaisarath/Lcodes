For two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"

Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"

Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""

 

Constraints:

    1 <= str1.length, str2.length <= 1000
    str1 and str2 consist of English uppercase letters.


class Solution {
    public String gcdOfStrings(String str1, String str2) {
        if (str1 == null || "".equals(str1)) {
            return "";
        }

        if (str2 == null || "".equals(str2)) {
            return "";
        }


        if (str1.length() < str2.length()) {
            return getCommonLargestDivisor(str1, str2);
        }

        return getCommonLargestDivisor(str2, str1);
    }

    private String getCommonLargestDivisor(String shorter, String longer) {
        if (longer.indexOf(shorter) == -1) {
            return "";
        }
        if ("".equals(shorter)) {
            return "";
        }

        if (shorter.equals(longer)) {
            return shorter;
        }

        while (longer.length() > shorter.length() && longer.substring(0, shorter.length()).equals(shorter)) {
            longer = longer.substring(shorter.length());
        }

        if (longer.equals(shorter)) {
            return shorter;
        }

        return getCommonLargestDivisor(longer, shorter);
    }

}


class Solution {
    public static String gcdOfStrings(String str1, String str2) {
        if (!(str1 + str2).equals(str2 + str1)) return "";

        if (str1.length() < str2.length()) {
            return gcdOfStrings(str2, str1);
        }	

        String reminder = str1.substring(str2.length());
        if (reminder.isEmpty()) {
            return str2;
        }

        return gcdOfStrings(str2, reminder);
    }
}
