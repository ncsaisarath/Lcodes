Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.

You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.

Return the total number of seconds that Ashe is poisoned.

 

Example 1:

Input: timeSeries = [1,4], duration = 2
Output: 4
Explanation: Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.
Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.

Example 2:

Input: timeSeries = [1,2], duration = 2
Output: 3
Explanation: Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.
Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.

 

Constraints:

    1 <= timeSeries.length <= 104
    0 <= timeSeries[i], duration <= 107
    timeSeries is sorted in non-decreasing order.


sample 1 ms submission

class Solution {
    public int findPoisonedDuration(int[] timeSeries, int duration) {
        //timeSeries is sorted
        int total = duration;
        int hurtingMaxTime = timeSeries[0] + total; //so that means till hurtingMaxTime, we are still getting hurt
        
        for(int i=1;i<timeSeries.length;i++){
            int curTime = timeSeries[i];
            total += duration;
            
            //if overlap with curTime and hurtinMaxTime, we should deduct the overlapped part
            if(curTime < hurtingMaxTime){
                total -= (hurtingMaxTime - curTime);
            }
            
            hurtingMaxTime = curTime + duration;
            
        }
        
        return total;
    }
}

class Solution2 {
    public int findPoisonedDuration(int[] timeSeries, int duration) {
        int prev = timeSeries[0];
        int res = 0;
        for(int i=1;i<timeSeries.length;i++){
            if(prev+duration-1<timeSeries[i]){
                res+=duration;
            }else{
                res += timeSeries[i]-prev;
            }   
            prev = timeSeries[i];
        }
        return res+duration;
    }
}
