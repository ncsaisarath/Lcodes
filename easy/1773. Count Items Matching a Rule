You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.

The ith item is said to match the rule if one of the following is true:

    ruleKey == "type" and ruleValue == typei.
    ruleKey == "color" and ruleValue == colori.
    ruleKey == "name" and ruleValue == namei.

Return the number of items that match the given rule.

 

Example 1:

Input: items = [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]], ruleKey = "color", ruleValue = "silver"
Output: 1
Explanation: There is only one item matching the given rule, which is ["computer","silver","lenovo"].

Example 2:

Input: items = [["phone","blue","pixel"],["computer","silver","phone"],["phone","gold","iphone"]], ruleKey = "type", ruleValue = "phone"
Output: 2
Explanation: There are only two items matching the given rule, which are ["phone","blue","pixel"] and ["phone","gold","iphone"]. Note that the item ["computer","silver","phone"] does not match.

 

Constraints:

    1 <= items.length <= 10^4
    1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10
    ruleKey is equal to either "type", "color", or "name".
    All strings consist only of lowercase letters.



class Solution {
    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {
        
        //Detecting which rule is applicable and storing it's index
        
        int ruleIndex;
        if(ruleKey.equals("type"))
            ruleIndex = 0;
        else if(ruleKey.equals("color"))
            ruleIndex = 1;
        else
            ruleIndex = 2;
        
        //iterating over the items list and counting number of items having
        //the given ruleValue at the ruleIndex position
        
        int count = 0;
        int n = items.size();
        for(int item = 0 ; item < n; item++){
            if(items.get(item).get(ruleIndex).equals(ruleValue))
                count++;
        }
        
        return count;
    }
}  



class Solution {
    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {
        //list inside a list which contains data type string
        int count = 0;
        int k = Integer.MIN_VALUE;
        if (ruleKey.equals("type")) {
             k = 0;
        }else if (ruleKey.equals("color")) {
             k = 1;
        }else {
             k = 2;
        }      
        for(int i = 0; i < items.size() ; i++) {
            if(items.get(i).get(k).equals(ruleValue)){
                count++;
            }   
        }    
        return count;
    }
}



class Solution {
    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {
        int count=0;
        int col=-1;
        if(ruleKey.equals("type"))
            col=0;
        else if(ruleKey.equals("color"))
            col=1;
        else
            col=2;
        for(List<String> lis:items){
            if(lis.get(col).equals(ruleValue))
                count++;
            // System.out.println(lis.toString());
        }
        return count;
    }
}
