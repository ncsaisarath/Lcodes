Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        
        TreeNode result = buildBst(nums,0, nums.length-1);
        return result;
        
    }
    
    private TreeNode buildBst(int[] nums, int start, int end) { 
    
        if( start > end){
            return null;
        }
        
        int mid = (start+end)/2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = buildBst(nums, start, mid-1);
        root.right = buildBst(nums, mid+1, end);
        return root;
    }       
}

class Solution2 {
    public TreeNode sortedArrayToBST(int[] nums) {
        
        return makeTree(nums,0,nums.length-1);
        
    }
    
    public TreeNode makeTree(int[] nums, int start, int end){
        if(start>end || start<0 || end>=nums.length)
            return null;
        int mid = start+(end-start)/2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = makeTree(nums,start,mid-1);
        root.right = makeTree(nums,mid+1,end);
        return root;
        
    }
}
