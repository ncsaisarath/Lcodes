Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:

Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.

Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.

 

Constraints:

    The number of nodes in the tree is in the range [1, 2 * 10^4].
    1 <= Node.val <= 10^5
    1 <= low <= high <= 10^5
    All Node.val are unique.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum = 0;
    public int rangeSumBST(TreeNode root, int low, int high) {
        //corner case
        if(root == null){
            return 0;
        }
        traverse(root, low,high);
        return sum;
    }
    //traverse the whole tree
    private void traverse(TreeNode root, int low, int high){
        if(root == null){
            return;
        }
        if(root.val < low){
            //target is under the right subtree
            traverse(root.right,low,high);
        } else if (root.val > high){
            traverse(root.left,low,high);
        } else{
            //root is inside the target range,which should be added into the sum
            sum = sum + root.val;
            traverse(root.right,low,high);
            traverse(root.left,low,high);
        }
    }
}


class Solution {
    int left,right,sum;
    public int rangeSumBST(TreeNode root, int low, int high) {
        left=low;
        right=high;
        sum=0;
        in(root);
        return sum;
    }
    
    public void in(TreeNode root){
        if(root==null)
            return;
        in(root.left);
        if(root.val>=left && root.val<=right)
            sum+=root.val;
        in(root.right);
    }
}
