Given the root of a binary tree, return the sum of all left leaves.

A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: 24
Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.

Example 2:

Input: root = [1]
Output: 0

 

Constraints:

    The number of nodes in the tree is in the range [1, 1000].
    -1000 <= Node.val <= 1000

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isLeaf(TreeNode node) {
    if (node == null) {
      return false;
    }

    if (node.right == null && node.left == null) {
      return true;
    }

    return false;
  }

  public int sumOfLeftLeaves(TreeNode root) {
    if (root == null || isLeaf(root)) {
      return 0;
    }
    int res = 0;
    if (isLeaf(root.left)) {
        res += root.left.val;
    }
    
    res += sumOfLeftLeaves(root.left);
    res += sumOfLeftLeaves(root.right);

    return res;
  }
}

class Solution2 {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null)
            return 0;
        else if(root.left==null && root.right==null)
            return 0;
        return sum(root.left,1)+sum(root.right,0);
    }
    
    public int sum(TreeNode rot,int x){
        if(rot==null)
            return 0;
        if(x==1 && rot.left==null && rot.right==null)
            return rot.val;
        return sum(rot.left,1)+sum(rot.right,0);
    }
}
