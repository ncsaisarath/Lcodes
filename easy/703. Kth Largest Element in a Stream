Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:

    KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
    int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.

 

Example 1:

Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8

 

Constraints:

    1 <= k <= 10^4
    0 <= nums.length <= 10^4
    -10^4 <= nums[i] <= 10^4
    -10^4 <= val <= 10^4
    At most 104 calls will be made to add.
    It is guaranteed that there will be at least k elements in the array when you search for the kth element.


class KthLargest {
    private final int[] arr;
    private final int k;
    private int size = 0;

    public KthLargest(int k, int[] nums) {
        this.k = k;
        this.arr = new int[k + 1];
        for (int num : nums)
            addVal(num);
    }
    
    private int addVal(int val) {
        if (size < k) {
            arr[++size] = val;
            for (int i = size, parent = i / 2; 
                 parent > 0 && arr[parent] > arr[i]; 
                 i = parent, parent = i / 2
            ) {
                arr[0] = arr[parent];
                arr[parent] = arr[i];
                arr[i] = arr[0];
            }
        } else if (val > arr[1]) {
            arr[1] = val;
            for (int i = 1, l = 2, r = 3, min = l > k ? r : r > k ? l : arr[l] > arr[r] ? r : l;
                 (l <= k || r <= k) && arr[i] > arr[min];
                 i = min, l = i * 2, r = l + 1, min = l > k ? r : r > k ? l : arr[l] > arr[r] ? r : l
            ) {
                arr[0] = arr[i];
                arr[i] = arr[min];
                arr[min] = arr[0];
            }
        }
        return arr[1];
    }
    
    public int add(int val) {
        return addVal(val);
    }
}


class KthLargest {
    
    int k;
    int[] larg;
    PriorityQueue<Integer> pq;
    public KthLargest(int k, int[] nums) {
        this.k = k;
        this.larg = nums;  
        pq=new PriorityQueue<>();
        for(int i=0;i<nums.length;i++){
            if(pq.size()<k)
                pq.add(nums[i]);
            else if(pq.peek()<nums[i]){
                pq.poll();
                pq.add(nums[i]);
            }
        }
    }
    
    public int add(int val) {
        if(pq.size()<k)
                pq.add(val);
        else if(pq.peek()<val){
            pq.poll();
            pq.add(val);
        }
        return pq.peek();
    }
}
