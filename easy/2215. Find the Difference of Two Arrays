Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:

    answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
    answer[1] is a list of all distinct integers in nums2 which are not present in nums1.

Note that the integers in the lists may be returned in any order.

 

Example 1:

Input: nums1 = [1,2,3], nums2 = [2,4,6]
Output: [[1,3],[4,6]]
Explanation:
For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].
For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].

Example 2:

Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2]
Output: [[3],[]]
Explanation:
For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].
Every integer in nums2 is present in nums1. Therefore, answer[1] = [].

 

Constraints:

    1 <= nums1.length, nums2.length <= 1000
    -1000 <= nums1[i], nums2[i] <= 1000


class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
     
List<List<Integer>> outerList = new ArrayList<>();
		List<Integer> innerList1 = new ArrayList<>();
		List<Integer> innerList2 = new ArrayList<>();

		boolean b1[] = new boolean[2001];
		boolean b2[] = new boolean[2001];

		for (int i : nums1) {
			b1[i + 1000] = true;
		}

		for (int i : nums2) {
			b2[i + 1000] = true;
		}

		for (int i : nums1) {
			if (!b2[i + 1000] && b1[i + 1000]) {
				b1[i + 1000] = false;
				innerList1.add(i);
			}
		}

		for (int i : nums2) {
			if (!b1[i + 1000] && b2[i + 1000]) {
				b2[i + 1000] = false;
				innerList2.add(i);
			}
		}

		outerList.add(innerList1);
		outerList.add(innerList2);

		return outerList;
    }
}




class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        List<List<Integer>> res = new ArrayList<>();
        
        boolean[] map = new boolean[2001];
        boolean[] map2 = new boolean[2001];
        
        for (int i : nums1) {
            map[i + 1000] = true;
        }
        
        List<Integer> temp = new ArrayList<>();
        for (int i : nums2) {
            map2[i + 1000] = true;
        }
        
        List<Integer> temp2 = new ArrayList<>();
        
        for (int i = 0; i < 2001; i++) {
            if ((map[i] && map2[i]) || (!map[i] && !map2[i])) {
                // ignore.
            } else if (map[i]) {
                temp.add(i - 1000);
            } else if (map2[i]) {
                temp2.add(i - 1000);
            }
        }
        
        res.add(temp);
        res.add(temp2);
        
        return res;
    }
}



class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        HashMap<Integer,Integer> hm1=new HashMap<>();
        HashMap<Integer,Integer> hm2=new HashMap<>();
    
        for(int i=0;i<nums1.length;i++)
        {
            hm1.put(nums1[i],1);
        }
        
        for(int i=0;i<nums2.length;i++)
        {
            hm2.put(nums2[i],1);
        }
        
        ArrayList<Integer> l1=new ArrayList<>();
        for(Integer key:hm1.keySet())
        {
            if(hm1.containsKey(key)!=hm2.containsKey(key))
            {
                l1.add(key);
            }        
                
        }
        
         ArrayList<Integer> l2=new ArrayList<>();
        for(Integer key:hm2.keySet())
        {
            if(hm2.containsKey(key)!=hm1.containsKey(key))
            {
                l2.add(key);
            }        
                
        }
         
        List<List<Integer>> l=new ArrayList<List<Integer>>(); 
        l.add(l1);
        l.add(l2);
        return l;
        
        
    }
}
