Given an array of positive integers arr, calculate the sum of all possible odd-length subarrays.

A subarray is a contiguous subsequence of the array.

Return the sum of all odd-length subarrays of arr.

 

Example 1:

Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

Example 2:

Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.

Example 3:

Input: arr = [10,11,12]
Output: 66

 

Constraints:

    1 <= arr.length <= 100
    1 <= arr[i] <= 1000


class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum=0;
        for (int i=0; i<arr.length; i++) {
            sum+=(((i+1)*(arr.length-i)+1)/2)*arr[i];
        }
        return sum;
    }
}



class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            int times = ((i+1) * (arr.length-i) + 1) / 2;
            sum += arr[i] * times;
        }
        return sum;
    }
}



class Solution {
    int[] left;
    int total=0;
    public int sumOddLengthSubarrays(int[] arr) {
        int n=arr.length;
        left = new int[n];
        left[0]=arr[0];
        total+=arr[0];
        for(int i=1;i<n;i++){
            left[i]+=left[i-1]+arr[i];
            total+=arr[i];
        }
        // System.out.println(Arrays.toString(left));
        int sum=total;
        for(int i=3;i<=n;i+=2){
            for(int j=0;j<=n-i;j++){
                sum+=inRange(arr,j,j+i-1);
                // System.out.println(sum);
            }
        }
        
        return sum;
    }
    
    public int inRange(int[] arr,int i,int j){
        return (left[j]-left[i])+arr[i];
    }
}
