Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:

    nums[a] + nums[b] + nums[c] == nums[d], and
    a < b < c < d

 

Example 1:

Input: nums = [1,2,3,6]
Output: 1
Explanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.

Example 2:

Input: nums = [3,3,6,4,5]
Output: 0
Explanation: There are no such quadruplets in [3,3,6,4,5].

Example 3:

Input: nums = [1,1,1,3,5]
Output: 4
Explanation: The 4 quadruplets that satisfy the requirement are:
- (0, 1, 2, 3): 1 + 1 + 1 == 3
- (0, 1, 3, 4): 1 + 1 + 3 == 5
- (0, 2, 3, 4): 1 + 1 + 3 == 5
- (1, 2, 3, 4): 1 + 1 + 3 == 5

 

Constraints:

    4 <= nums.length <= 50
    1 <= nums[i] <= 100



class Solution {
    public int countQuadruplets(int[] nums) {
        int res = 0;
        int[] arr = new int[201];
        for (int i = 1; i < nums.length - 2; i++) {
            for (int j = 0; j < i; j++) {
                arr[nums[j] + nums[i]]++;
            }
            for (int k = i + 2; k < nums.length; k++) {
                int dif = nums[k] - nums[i + 1];
                if (dif > 0) {
                    res += arr[dif];
                }
            }
        }
        return res;
    }
}



class Solution {
    public int countQuadruplets(int[] nums) {
        int[] counts = new int[201];
        
        int a = 0;
        int b = 1;
        int c = 2;
        int d = 3;
        
        counts[nums[a] + nums[b]] = 1;
        
        int num = 0;
        
        for (; c < nums.length; ++c) {
            for (d = c + 1; d < nums.length; ++d) {
                if (nums[d] - nums[c] >= 0 && nums[d] + nums[c] < counts.length) {
                    num += counts[nums[d] - nums[c]];
                }
            }
            
            for (a = 0, b = c; a < b; ++a) {
                ++counts[nums[a] + nums[b]];
            }
        }
        
        return num;
    }
}




class Solution {
    public int countQuadruplets(int[] nums) {
        int res=0;
        int[] v=new int[101];
        v[nums[nums.length-1]]++;
        for(int i=nums.length-2;i>=2;i--){
            for(int j=i-1;j>=1;j--){
                int sum=nums[i]+nums[j];
                if(sum>100){
                    continue;
                }
                for(int k=j-1;k>=0;k--){
                    int sum2=sum+nums[k];
                    if(sum2>100){
                        continue;
                    }
                    res+=v[sum2];
                }
            }
            v[nums[i]]++;
        }
        return res;
    }
}
