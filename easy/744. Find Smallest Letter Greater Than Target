Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.

Note that the letters wrap around.

    For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'.

 

Example 1:

Input: letters = ["c","f","j"], target = "a"
Output: "c"

Example 2:

Input: letters = ["c","f","j"], target = "c"
Output: "f"

Example 3:

Input: letters = ["c","f","j"], target = "d"
Output: "f"

 

Constraints:

    2 <= letters.length <= 10^4
    letters[i] is a lowercase English letter.
    letters is sorted in non-decreasing order.
    letters contains at least two different characters.
    target is a lowercase English letter.


class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
      int start = 0;
        int end = letters.length-1;
        while(start<=end){
            int mid = start + (end - start)/2;
            if(target<letters[mid]){
                end = mid -1;
            }
            else{
                start = mid+1;
            }
        }
        return letters[start % letters.length];
    }  
    }


class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        int n = letters.length;
        char[] ch = new char[n*2];
        for(int i=0;i<letters.length;i++){
            ch[i]=letters[i];
            ch[i+n]=letters[i];
        }
        int l=0,r=n-1;
        while(l<=r){
            int mid = l+(r-l)/2;
            if(ch[mid]==target){
                while(ch[mid+1]==target)
                    mid++;
                return ch[mid+1];
            }
                
            else if(ch[mid]>target)
                r=mid-1;
            else
                l=mid+1;
        }
        while(ch[l]==target)
            l++;
        return ch[l];
    }
}
