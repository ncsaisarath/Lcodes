Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

 

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

Example 2:

Input: arr = [1,1]
Output: 1

 

Constraints:

    1 <= arr.length <= 10^4
    0 <= arr[i] <= 10^5


class Solution {
    public int findSpecialInteger(int[] arr) {
        if(arr.length ==0) return -1;
        int freq= arr.length/4;
        int end=1,count=1;
        for( ;count<=freq && end<arr.length; end++) {
            if(arr[end] == arr[end-1]) {
                count++;
            } else {                
                count =1;                            
            }
        }
        return arr[end-1];
    }
}



class Solution {
    public int findSpecialInteger(int[] arr) {
        int n=arr.length;
        if(n<=2)
            return arr[0];
        else if(n==3){
            if(arr[0]==arr[1])
                return arr[0];
            else
                return arr[2];
        }else if(n==4){
            if(arr[0]==arr[1] || arr[1]==arr[2])
                return arr[1];
            else
                return arr[3];
        } 
        
        int k=n/4;
        for(int i=0;i<n;i++){
            if(i+k<n && arr[i]==arr[i+k])
                return arr[i];
        }
        return -1;
    }
}
