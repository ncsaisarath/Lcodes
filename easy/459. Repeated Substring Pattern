Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

Example 1:

Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.

Example 2:

Input: s = "aba"
Output: false

Example 3:

Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.

 

Constraints:

    1 <= s.length <= 10^4
    s consists of lowercase English letters.

class Solution {
    public boolean repeatedSubstringPattern(String s) {
next_l:
        for (int n = s.length(), l = n >> 1; l > 0; l--) {
            if ((n % l) == 0) {
                String ss = s.substring(0, l);
                
                for (int i = n - l; i > 0; i -= l) {
                    if (!ss.equals(s.substring(i, i + l))) continue next_l;
                }
                
                return true;
            }
        }
        
        return false;
    }
}

// TC => O(n)
// SC => (n)
// using KMP
class Solution2 {
    public boolean repeatedSubstringPattern(String s) {
        int len = s.length();
        
        if(len <= 1) return false;
        
        int[] LPS = new int[len];
        
        int l = 0, r=1;
        
        while(l <= r && r < len){
           if(s.charAt(l) == s.charAt(r)){
               LPS[r] = l+1;
               r++;
               l++;
           }else{
               //reset the l pointer
               if(l > 0){
                   l = LPS[l-1];
               }else{ 
                   r++;
               }
           }
        }
        
        
        if(LPS[len-1] == 0){
            return false;
        }
        
        return LPS[len-1] % (len - LPS[len-1]) == 0;
        
    }
}


class Solution3 {
    public boolean repeatedSubstringPattern(String s) {
        boolean res = false;
        StringBuilder sb;
        for(int i=1;i<=s.length()/2;i++){
            sb = new StringBuilder();
            if(s.length()%i==0){
                String temp = s.substring(0,i);
                // System.out.println(temp);
                sb.append(temp);
                while(sb.length()<s.length()){
                    sb.append(temp);
                }
                if(sb.toString().equals(s))
                    return true;
            }
        }
        return res;
    }
}
