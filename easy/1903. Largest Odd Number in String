You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.

Example 2:

Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".

Example 3:

Input: num = "35427"
Output: "35427"
Explanation: "35427" is already an odd number.

 

Constraints:

    1 <= num.length <= 105
    num only consists of digits and does not contain any leading zeros.



class Solution {
    public String largestOddNumber(String num) {
         String ans="";
        int index=0;
        boolean q =false;
        for(int i=num.length()-1;i>=0;i--){
            if(num.charAt(i)%2!=0){
                index=i;
                q=true;
                break;
            }
        }
        if(q==false){
            return ans;
        }
        return num.substring(0,index+1);
    }
}



class Solution {
    public String largestOddNumber(String num) {
        String max="";
        for(int i=num.length()-1;i>=0;i--){
            int temp = (num.charAt(i)-'0');
            
            if(temp%2==1){
                max=num.substring(0,i+1);
                break;
            }
        }
        return max;
    }
}
