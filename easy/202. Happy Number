Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

    Starting with any positive integer, replace the number by the sum of the squares of its digits.
    Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
    Those numbers for which this process ends in 1 are happy.

Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:

Input: n = 2
Output: false

 

Constraints:

    1 <= n <= 231 - 1

class Solution {
    public boolean isHappy(int n) {
        if(n<=0) 
            return false;
        while(true){
            int sum=0;
            while(n!=0){
              sum+=(n%10)*(n%10);
              n=n/10;
            }
            if(sum/10==0){
               if(sum == 1 || sum == 7) 
                   return true;
               else
                   return false;
            }
            n=sum;
        }
    }
}

class Solution2 {
    List<Integer> lis = new ArrayList<>();
    public boolean isHappy(int n) {
        lis.add(n);
        String s = String.valueOf(n);
        int sss = sos(s);
        if(sss==1)
            return true;
        else if(lis.indexOf(sss)!=-1){
            return false;
        }
        
        return isHappy(sss);     
    }
    
    public int sos(String x){
        int res=0;
        for(int i=0;i<x.length();i++){
            res += Math.pow(x.charAt(i)-'0',2);
        }
        return res;
    }
}
