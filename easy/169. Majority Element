Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

class Solution {
    public int majorityElement(int[] nums) {
        return recurse(nums, 0);
    }
    
    public int recurse(int[] nums, int start){
        int n = nums.length;
        int tracker= 1;
        for(int i=start+1;i<n;i++){
            if(nums[start]==nums[i]){
                tracker++;
            }else{
                tracker--;
            }
            if(tracker==0){
                return recurse(nums, i+1);
            }
        }
        return nums[start];
    }
}

class Solution2 {
    public int majorityElement(int[] nums) {
        int count = 1;
        int index=0;
        int n = nums.length;
        for(int i=1;i<n;i++){
            if(nums[i]==nums[index]){
                count++;
                // if(count>n/2)
                //     break;
            }
            else{
                count--;
                if(count<=0){
                    index=i;
                    count=1;
                }
            }            
        }
        return nums[index];
    }
}
