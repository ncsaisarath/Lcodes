Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2.00000
Explanation: The five points are shown in the above figure. The red triangle is the largest.

Example 2:

Input: points = [[1,0],[0,0],[0,1]]
Output: 0.50000

 

Constraints:

    3 <= points.length <= 50
    -50 <= xi, yi <= 50
    All the given points are unique.


class Solution {
    public double largestTriangleArea(int[][] points) {
        double ans = 0.0;
        
        int[][] hull = getHull(points);     
        
        int n = hull.length;
        for(int i = 0; i < n - 2; i++){
            for(int j = i + 1; j < n - 1; j++){
                for(int k = j + 1; k < n; k++){
                    ans = Math.max(ans, getArea(hull[i], hull[j], hull[k]));
                }
            }
        }
        return ans;
    }
    
    public double getArea(int[] p1, int[] p2, int[] p3){
        return 0.5 * Math.abs(p1[0] * p2[1] + p2[0] * p3[1] + p3[0] * p1[1] - p1[0] * p3[1] - p2[0] * p1[1] - p3[0] * p2[1]);
    }
    
    public int[][] getHull(int[][] points){
        int n = points.length;
        Arrays.sort(points, (a, b) -> a[0] == b[0] ? Integer.compare(a[1], b[1]) : Integer.compare(a[0], b[0]));
        int[][] hull = new int[2 * n][2];
        int k = 0;
        for(int i = 0; i < n; i++){
            while(k >= 2 && isLeft(hull[k - 2], hull[k - 1], points[i])){
                k--;
            }
            hull[k++] = points[i];
        }
        
        int t = k + 1;
        for(int i = n - 2; i >= 0; i--){
            while(k >= t && isLeft(hull[k - 2], hull[k - 1], points[i])){
                k--;
            }
            hull[k++] = points[i];
        }
        
        int[][] ans = null;
        if(k > 1){
            ans = new int[k -1][2];
            for(int i = 0; i < k - 1; i++){
                ans[i] = hull[i];
            }
        }
        return ans;
        
    }
    
    public boolean isLeft(int[] p, int[] q, int[] r){
        return (q[0] - p[0]) * (r[1] - q[1]) - (r[0]- q[0]) * (q[1] - p[1]) > 0;
    }
}


class Solution {
    public double largestTriangleArea(int[][] points) {
        int n = points.length;
        double max=0;
        for(int i=0;i<n-2;i++){
            for(int j=i+1;j<n-1;j++){
                for(int k=j+1;k<n;k++){
                    
                    double a = dist(points[i],points[j]);
                    double b = dist(points[k],points[j]);
                    double c = dist(points[i],points[k]);
                    
                    if(isValid(a,b,c)){
                        double s = (a+b+c)/2;
                        double area = Math.sqrt(s*(s-a)*(s-b)*(s-c));
                        if(area>max)
                            max=area;
                    }
                }
            }
        }
        return max;
    }
    
    public double dist(int[] p1,int[] p2){
        return Math.sqrt(Math.pow(p1[0]-p2[0],2)+Math.pow(p1[1]-p2[1],2));
    }
    
    public boolean isValid(double a,double b,double c){
        if(a+b<c || b+c<a || c+a<b)
            return false;
        return true;
    }
}
