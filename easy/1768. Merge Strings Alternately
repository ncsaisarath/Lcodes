You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.

 

Example 1:

Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r

Example 2:

Input: word1 = "ab", word2 = "pqrs"
Output: "apbqrs"
Explanation: Notice that as word2 is longer, "rs" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s

Example 3:

Input: word1 = "abcd", word2 = "pq"
Output: "apbqcd"
Explanation: Notice that as word1 is longer, "cd" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d

 

Constraints:

    1 <= word1.length, word2.length <= 100
    word1 and word2 consist of lowercase English letters.




class Solution {
    public String mergeAlternately(String word1, String word2) {
        StringBuilder ans = new StringBuilder();
        int i=0;
        int j =0;
        while(i<word1.length()&&j<word2.length()){
            ans.append(word1.charAt(i));
            i++;
            ans.append(word2.charAt(j));
            j++;
        }
        if(i<=word1.length()-1){
            while(i<word1.length()){
                 ans.append(word1.charAt(i));
            i++;
            }
        }
        if(j<=word2.length()-1){
            while(j<word2.length()){
                 ans.append(word2.charAt(j));
            j++;
            }
        }
        return ans.toString();
    }
}



class Solution {
    public String mergeAlternately(String word1, String word2) {
        StringBuilder mergedWord = new StringBuilder();
        int word1Index = 0;
        int word2Index = 0;

        while (word1Index < word1.length() || word2Index < word2.length()) {
            if (word1Index >= word1.length() && word2Index < word2.length()) {  // word1 is all done, but not word2
                mergedWord.append(word2.charAt(word2Index));
                word2Index++;
            } else if (word1Index < word1.length() && word2Index >= word2.length()) {  // word2 is all done, but not word1
                mergedWord.append(word1.charAt(word1Index));
                word1Index++;
            } else {  // word1Index < word1.length() && word2Index < word2.length()
                // word1 then word2.
                mergedWord.append(word1.charAt(word1Index));
                word1Index++;

                mergedWord.append(word2.charAt(word2Index));
                word2Index++;
            }
        }
        return mergedWord.toString();
    }
}




class Solution {
    public String mergeAlternately(String word1, String word2) {
        int i=0,j=0;
        StringBuilder sb = new StringBuilder();
        int w1=word1.length(),w2=word2.length();
        while(i<w1&&j<w2){
            sb.append(word1.charAt(i++));
            sb.append(word2.charAt(j++));
        }
        while(i<w1){
            sb.append(word1.charAt(i++));
        }
        while(j<w2){
            sb.append(word2.charAt(j++));
        }
        return sb.toString();
    }
}
