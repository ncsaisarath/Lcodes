Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.

Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.

Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.

 

Constraints:

    1 <= nums.length <= 10^4
    -2^31 <= nums[i] <= 2^31 - 1
    
Follow up: Can you find an O(n) solution?

class Solution {
    public int thirdMax(int[] nums) {
        long a = Long.MIN_VALUE, b = Long.MIN_VALUE, c = Long.MIN_VALUE;
        
        for (int x : nums) {
            if (a < x) {
                c = b;
                b = a;
                a = x;
            } else if (b < x && x != a) {
                c = b;
                b = x;
            } else if (c < x && x != a && x != b) {
                c = x;
            }
        }
        
        if (c != Long.MIN_VALUE)
            return (int) c;
        
        return (int) a;
    }
}

class Solution {
    public int thirdMax(int[] nums) {
        if(nums.length==1)
            return nums[0];
        else if(nums.length==2)
            return nums[0]<nums[1]?nums[1]:nums[0];
        else if(nums.length==3){
            if(nums[0]==nums[1] || nums[1]==nums[2]){
                int temp = nums[0]>nums[1]?nums[0]:nums[1];
                return temp>nums[2]?temp:nums[2];
            }
                
            int temp = nums[0]<nums[1]?nums[0]:nums[1];
            return temp<nums[2]?temp:nums[2];
        }
        int first=0,second=0,third=0;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++){
            if(nums[i]<min)
                min=nums[i];
            
        }
        first=min;
        second=min;
        third=min;
        // System.out.println(" "+first+" "+second+" "+third+" ");
        for(int i=0;i<nums.length;i++){
            if(nums[i]>first){
                int temp=first;
                first=nums[i];
                third=second;
                second=temp;
            }else if(nums[i]>second && nums[i]!=first){
                third=second;
                second=nums[i];
            }else if(nums[i]>third && nums[i]!=second && nums[i]!=first)
                third=nums[i];
            // System.out.println(i+" "+first+" "+second+" "+third+" ");
            
        }
        if(first==second || second==third)
            return first;
     
        
        return third;
    }
}
