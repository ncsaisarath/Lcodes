Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true

Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false

Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false

 

Constraints:

    1 <= pattern.length <= 300
    pattern contains only lower-case English letters.
    1 <= s.length <= 3000
    s contains only lowercase English letters and spaces ' '.
    s does not contain any leading or trailing spaces.
    All the words in s are separated by a single space.

class Solution {
    public boolean wordPattern(String pattern, String s) {
        HashMap<Character,String> mapCharToWord = new HashMap<>();//[(a,dog),(b,cat)]
        HashMap<String,Character > mapWordToChar = new HashMap<>();//[(dog,a),(b,cat)]
        String[] strings = s.split(" ");
        if (strings.length != pattern.length())
            return false;
        
        for(int i=0; i<pattern.length(); i++) {
            
            if(!mapCharToWord.containsKey(pattern.charAt(i))) {
                if(mapWordToChar.containsKey(strings[i])){
                    return false;
                }else {
                    mapCharToWord.put(pattern.charAt(i),strings[i]);
                    mapWordToChar.put(strings[i],pattern.charAt(i));
                }
            }else {
                if(!mapCharToWord.get(pattern.charAt(i)).equals(strings[i]))
                    return false;
            }
        }
        
        return true;
    }
}

class Solution2 {
    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split(" ");
        
        if(words.length!=pattern.length())
            return false;
        HashMap<Character,String> map = new HashMap<>();
        for(int i=0;i<words.length;i++){
            if(!map.containsKey(pattern.charAt(i)) && !map.containsValue(words[i])){
                map.put(pattern.charAt(i),words[i]);
                
            }else if(map.size()>0 && !map.getOrDefault(pattern.charAt(i),"").equals(words[i])){
                
                return false;
            }
        }
        return true;
    }
}
