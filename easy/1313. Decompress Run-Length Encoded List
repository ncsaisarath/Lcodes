We are given a list nums of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.

Return the decompressed list.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].
The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].
At the end the concatenation [2] + [4,4,4] is [2,4,4,4].

Example 2:

Input: nums = [1,1,2,3]
Output: [1,3,3]

 

Constraints:

    2 <= nums.length <= 100
    nums.length % 2 == 0
    1 <= nums[i] <= 100


class Solution {
    public int[] decompressRLElist(int[] nums) {
          int arrSize = 0;
        for (int i = 0; i < nums.length; i += 2) {
            arrSize += nums[i];
        }
        
        int[] result = new int[arrSize];

        int startIdx = 0;
        for (int i = 0; i < nums.length; i += 2) {
            Arrays.fill(result, startIdx, startIdx + nums[i], nums[i + 1]);
            startIdx += nums[i];
        }
        return result;
    
    }
}



class Solution {
    public int[] decompressRLElist(int[] nums) {
        int totalFreq= 0;
        for(int i=0; i<nums.length; i+=2){
            totalFreq+= nums[i];
        }
        int[] arr= new int[totalFreq];
        int startIndex= 0;
        for(int i=0; i<nums.length; i+=2){
            Arrays.fill(arr, startIndex, startIndex+nums[i], nums[i+1]);
            startIndex+= nums[i];
        }
        return arr;
        
        
        /*ArrayList<Integer> list= new ArrayList<>();
        int freq, val;
        for(int i=0; i<nums.length/2; i++){
            freq= nums[2*i];
            val= nums[2*i+1];
            for(int j=1; j<=freq; j++){
                list.add(val);
            }
        }
        
        int[] arr= new int[list.size()];
        for(int i=0; i<arr.length; i++){
            arr[i]= list.get(i);
        }
        
        return arr;*/
    }
}



class Solution {
    public int[] decompressRLElist(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i += 2) {
            sum += nums[i];
        }
        int[] result = new int[sum];
        int currentIndex = 0;
        for (int i = 0; i < nums.length; i += 2) {
            for (int j = 0; j < nums[i]; j++, currentIndex++) {
                result[currentIndex] = nums[i + 1];
            }
        }
        return result;
    }
}



class Solution {
    public int[] decompressRLElist(int[] nums) {
        ArrayList<Integer> lis = new ArrayList<>();
        for(int i=1;i<nums.length;i+=2){
            int c=nums[i-1];
            int y=nums[i];
            while(c-->0){
                lis.add(y);
            }
        }
        int[] res = new int[lis.size()];
        int pos=0;
        for(int x:lis)
            res[pos++]=x;
        return res;
    }
}
