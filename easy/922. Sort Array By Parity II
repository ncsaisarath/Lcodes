Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.

Example 2:

Input: nums = [2,3]
Output: [2,3]

 

Constraints:

    2 <= nums.length <= 2 * 104
    nums.length is even.
    Half of the integers in nums are even.
    0 <= nums[i] <= 1000

 

Follow Up: Could you solve it in-place?


class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        int j = 1;
        int n = nums.length;
        for (int i = 0; i < n; i += 2) {
            if((nums[i] & 1) == 1) {
                while (j < n && (nums[j] & 1) == 1) {
                    j += 2;
                }
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
        return nums;
    }
}


class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        
        int[] rv = new int[nums.length];
        int ei = 0;
        int oi = 1;
        
        for(int i=0; i<nums.length; i++) {
            
            if(nums[i] % 2 ==0) {
                rv[ei] = nums[i];
                ei = ei + 2;
            } else {
                rv[oi] = nums[i];
                oi = oi +2;
            }
            
        }
        
        
        return rv;
        
    }
}


class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        int s=0,e=1,n=nums.length;
        while(s<n && e<n){
            while(s<n && nums[s]%2==0)
                s+=2;
            while(e<n && nums[e]%2==1)
                e+=2;
            if(s<n && e<n){
                int temp=nums[s];
                nums[s]=nums[e];
                nums[e]=temp;
            }
            
        }
        return nums;
    }
}
