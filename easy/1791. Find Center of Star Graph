There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.

You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.

 

Example 1:

Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.

Example 2:

Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1

 

Constraints:

    3 <= n <= 10^5
    edges.length == n - 1
    edges[i].length == 2
    1 <= ui, vi <= n
    ui != vi
    The given edges represent a valid star graph.



class Solution {
    public int findCenter(int[][] a) {
        if(a[0][0]==a[1][0] || a[0][0]==a[1][1]) return a[0][0];
        else  return a[0][1];
    }
}


class Solution {
    public int findCenter(int[][] edges) {
        HashSet<Integer> visited = new HashSet<Integer>();
        for(int[] i : edges){
            for(int j : i){
                if(visited.contains(j)){
                    return j;
                }
                visited.add(j);
            }
        }
        return 0;
    }
}



class Solution {
    public int findCenter(int[][] edges) {
        int ans = 0;
        int i = 0;
        boolean flag = true;
        while(i < 2){
            ans = edges[0][i];
            int j = 1;
            while(j<edges.length){
               if(edges[j][0] != ans && edges[j][1] != ans) {
                   flag = false;
                   break;
               }
                else{
                    flag = true;
                }
                j++;
            }
            if(flag){
                return ans;
            }
            i++;
        }
        return ans;
    }
}




class Solution {
    public int findCenter(int[][] edges) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int maxele=-1,max=-1;
        for(int[] edge:edges){
            map.put(edge[0],map.getOrDefault(edge[0],0)+1);
            map.put(edge[1],map.getOrDefault(edge[1],0)+1);
            if(map.get(edge[0])>max){
                max=map.get(edge[0]);
                maxele=edge[0];
            }else if(map.get(edge[1])>max){
                max=map.get(edge[1]);
                maxele=edge[1];
            }
        }
        return maxele;
    }
}
