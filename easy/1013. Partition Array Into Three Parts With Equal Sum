Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

 

Example 1:

Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1

Example 2:

Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false

Example 3:

Input: arr = [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4

 

Constraints:

    3 <= arr.length <= 5 * 10^4
    -10^4 <= arr[i] <= 10^4


class Solution {
    public boolean canThreePartsEqualSum(int[] arr) {
        int sum = 0;
        for(int a: arr){
            sum+=a;
        }
        if(sum%3==1) return false;
        int avg =sum/3;
        int ans = 0;
        int count = 0;
        for(int i=0; i<arr.length; i++){
            ans+=arr[i];
            if(ans==avg){
                count++;
                ans=0;
            }
        }
        
        return count>=3 && sum%3==0;
    }
}


class Solution {
    public boolean canThreePartsEqualSum(int[] arr) {
        int sum = Arrays.stream(arr).sum();
        
        // if the total sum doesn't divide into three, return false
        if (sum%3 != 0)
            return false;
        int each = sum/3, temp = 0, found = 0;
        
        // count parts with right sum
        for (int i=0; i<arr.length; i++) {
            temp += arr[i];
            if (temp == each) {
                temp = 0;
                found++;
            }
        }
        return found>=3? true : false;
        
    }
}
