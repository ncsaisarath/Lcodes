An n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).

Given an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.

 

Example 1:

Input: matrix = [[1,2,3],[3,1,2],[2,3,1]]
Output: true
Explanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.
Hence, we return true.

Example 2:

Input: matrix = [[1,1,1],[1,2,3],[1,2,3]]
Output: false
Explanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.
Hence, we return false.

 

Constraints:

    n == matrix.length == matrix[i].length
    1 <= n <= 100
    1 <= matrix[i][j] <= n


class Solution {
    public boolean checkValid(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            if (!verify(matrix, n, i)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean verify(int[][] matrix, int n, int i) {
        boolean[] rowContains = new boolean[n];
        boolean[] colContains = new boolean[n];
        for (int j = 0; j < n; j++) {
            if (rowContains[matrix[i][j] - 1] || colContains[matrix[j][i] - 1]) {
                return false;
            }
            rowContains[matrix[i][j] - 1] = true;
            colContains[matrix[j][i] - 1] = true;
        }
        return true;
    }
}




class Solution {
    public boolean checkValid(int[][] matrix) {
        int n = matrix.length;
        for(int i=0; i<n; i++){
            if(!validator(matrix,i,i,n)) return false;
        }
        return true;
    }
    public boolean validator(int [][] matrix, int row, int col ,int n){
        boolean colExist[] = new boolean[n+1];
        boolean rowExist[] = new boolean[n+1];
        for(int s=0; s<n; s++){
            if(colExist[matrix[col][s]] == false){
                colExist[matrix[col][s]] = true;
            } else {
                return false;
            }
            if(rowExist[matrix[s][row]] == false){
                rowExist[matrix[s][row]] = true;
            } else {
                return false;
            }
        }
        return true;
    }
}




class Solution {
    public boolean checkValid(int[][] matrix) {
        int n = matrix.length;
        int[] arr = new int[n];


        for (int [] mat : matrix){

            for (int i = 0; i < mat.length; i++) {
                int num = mat[i];
                
                if (arr[num - 1] != 0){
                    return false;
                } else {
                    arr[num - 1] = num;
                }
            }

            Arrays.fill(arr, 0);
        }

        Arrays.fill(arr, 0);

        for (int col = 0; col < n; col++) {
            for (int row = 0; row < n; row++) {

                int num = matrix[row][col];
                if (arr[num - 1] != 0){
                    return false;
                } else {
                    arr[num - 1] = num;
                }
            }
            
            Arrays.fill(arr, 0);
            
        }
        
        return true;
    }
}



class Solution {
    
    public boolean checkValid(int[][] matrix) {
        return checkValidRows(matrix) && checkValidColumns(matrix);
    }
    
    private boolean checkValidRows(int[][] matrix) {
        boolean[] seen;
        for(int[] row : matrix) {
            seen = new boolean[row.length + 1];
            for (int item : row) {
                if(seen[item]) {
                    return false;
                }
                seen[item] = true;
            }
        }
        return true;
    }
    
    private boolean checkValidColumns(int[][] matrix) {
        boolean[] seen;
        for(int j = 0; j < matrix.length; j++) {
            seen = new boolean[matrix.length + 1];
            for (int i = 0; i < matrix.length; i++) {
                if(seen[matrix[i][j]]) {
                    return false;
                }
                seen[matrix[i][j]] = true;
            }
        }
        return true;
    }
}
