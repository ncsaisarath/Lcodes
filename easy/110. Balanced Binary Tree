Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

    1. a binary tree in which the left and right subtrees of every node differ in height by no more than 1.
    
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
class Solution {
    public boolean isBalanced(TreeNode root) {
        int bal = balance(root);
        if(bal==-1)
            return false;
        return true;
    }
    
    public int balance(TreeNode root){
        if(root==null){
            return 0;
        }
        
        int leftH = balance(root.left);
        if(leftH ==-1) return -1;
        int rightH= balance(root.right);
        if(rightH == -1) return -1;
        
        if((leftH-rightH>1) || (rightH-leftH>1)){
            return -1;
        }
        
        return(leftH>rightH?leftH:rightH)+1;
    }
}

class Solution2 {
    public boolean isBalanced(TreeNode root) {
        if(root==null)
            return true;
        int res = post(root);
        if(res==-1)
            return false;
        return true;
    }
    
    public int post(TreeNode root){
        if(root==null)
            return 0;
        if(root.left==null && root.right==null)
            return 1;
        int lh=0,rh=0;
        lh=post(root.left);
        rh=post(root.right);
        if(lh==-1 || rh==-1)
            return -1;
        if(Math.abs(lh-rh)>1){
            return -1;
        }
        return Math.max(lh,rh)+1;
        
    }
}
