Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.

Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows

    a, b are from arr
    a < b
    b - a equals to the minimum absolute difference of any two elements in arr

 

Example 1:

Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.

Example 2:

Input: arr = [1,3,6,10,15]
Output: [[1,3]]

Example 3:

Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]

 

Constraints:

    2 <= arr.length <= 105
    -106 <= arr[i] <= 106


// class Solution {
//     public List<List<Integer>> minimumAbsDifference(int[] arr) {
//         Arrays.sort(arr);
//         int min = arr[1] - arr[0];
//         List<List<Integer>> result = new ArrayList();
        
//         for(int i = 1 ; i < arr.length; i++)
//         {
//             int temp = (arr[i] - arr[i-1]);
//             //System.out.println(min + " " + temp);
//             if(min == temp)
//             {
//                 result.add(Arrays.asList(arr[i-1], arr[i]));
//             } else if(min > temp)
//             {
//                 result = new ArrayList();
//                 min = temp;
//                 result.add(Arrays.asList(arr[i-1], arr[i]));
//             }
//         }
//         return result;
//     }
// }

/////////////////////////////////////////
//                                     //
//      this is 1 ms submission        //
//                                     //
/////////////////////////////////////////
class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
return new java.util.AbstractList<List<Integer>>() {

            int buffer[];
            int size = 0;
            int min;
            boolean init = false;

            @Override
            public List<Integer> get(int index) {
                if (!init) {
                    init();
                }
                return Arrays.asList(buffer[index] - min, buffer[index]);
            }

            @Override
            public int size() {
                if (!init) {
                    init();
                }
                return size;
            }

            private void init() {
                Arrays.sort(arr);
                buffer = new int[arr.length];
                min = Integer.MAX_VALUE;
                size = 0;
                for (int i = 1; i < arr.length; i++) {
                    int abs = arr[i] - arr[i - 1];
                    if (abs == min) {
                        buffer[size++] = arr[i];
                    } else if (abs < min) {
                        size = 0;
                        buffer[size++] = arr[i];
                        min = abs;
                    }
                }
                init = true;
            }
        };
    }
}


//////////////////////////////////////////
//                                      //
//      this is 51300 KB submission     //
//                                      //
//////////////////////////////////////////

// class Solution {
//     public List<List<Integer>> minimumAbsDifference(int[] arr) {
//         List<List<Integer>> res = new ArrayList<>();
        
//         Arrays.sort(arr);
        
//         int minEle = Integer.MAX_VALUE;
        
//         for(int i=0; i < arr.length - 1; i++) {
//             int diff = arr[i+1] - arr[i];
//             if(diff < minEle) {
//                 minEle = diff; 
//                 res = new ArrayList();
//                 res.add(Arrays.asList(arr[i],arr[i+1]));
//             }else if(diff == minEle){
//                 res.add(Arrays.asList(arr[i],arr[i+1]));
//             }
//         }
        
//         return res;
//     }
// }



class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
        List<List<Integer>> lis = new ArrayList<>();
        Arrays.sort(arr);
        int n=arr.length;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n-1;i++){
            int diff = arr[i+1]-arr[i]; 
            if(min>diff){
                lis.clear();
                min=diff;
            }
            if(min==diff){
                List<Integer> temp = new ArrayList<>();
                temp.add(arr[i]);
                temp.add(arr[i+1]);
                lis.add(temp);
            }
        }
        return lis;
    }
}
