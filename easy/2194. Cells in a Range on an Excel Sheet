A cell (r, c) of an excel sheet is represented as a string "<col><row>" where:

    <col> denotes the column number c of the cell. It is represented by alphabetical letters.
        For example, the 1st column is denoted by 'A', the 2nd by 'B', the 3rd by 'C', and so on.
    <row> is the row number r of the cell. The rth row is represented by the integer r.

You are given a string s in the format "<col1><row1>:<col2><row2>", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2.

Return the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. The cells should be represented as strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.

 

Example 1:

Input: s = "K1:L2"
Output: ["K1","K2","L1","L2"]
Explanation:
The above diagram shows the cells which should be present in the list.
The red arrows denote the order in which the cells should be presented.

Example 2:

Input: s = "A1:F1"
Output: ["A1","B1","C1","D1","E1","F1"]
Explanation:
The above diagram shows the cells which should be present in the list.
The red arrow denotes the order in which the cells should be presented.

 

Constraints:

    s.length == 5
    'A' <= s[0] <= s[3] <= 'Z'
    '1' <= s[1] <= s[4] <= '9'
    s consists of uppercase English letters, digits and ':'.



import java.util.AbstractList;
import java.util.List;

public class Solution {
    public List<String> cellsInRange(String s) {
        return new MyList(s);
    }

    private static class MyList extends AbstractList<String> {
        final char c1, r1;
        final int rows, cols;

        MyList(String s) {
            c1 = s.charAt(0);
            r1 = s.charAt(1);
            cols = s.charAt(3) - c1 + 1;
            rows = s.charAt(4) - r1 + 1;
        }


        @Override
        public String get(int index) {
            return (char) (c1 + index / rows) + "" + (char) (r1 + index % rows);
        }

        @Override
        public int size() {
            return rows * cols;
        }
    }
}



class Solution {
    public List<String> cellsInRange(String s) {
        int column = (int)s.charAt(1);
        int row = (int)s.charAt(4);
        int start = (int)s.charAt(0);
        int end = (int)s.charAt(3);
        
        List<String> ls = new ArrayList<>();   
        for(int j=start; j<=end; j++){
            char ch = (char)j;
            for(int i=column;i<=row;i++){
                
                StringBuilder sb = new StringBuilder();
                sb.append(ch);
                sb.append((char)i);
                ls.add(sb.toString());
            }
        }
        
        return ls;
    }
}



class Solution {
    public List<String> cellsInRange(String s) {
        char a=s.charAt(0);
        char b=s.charAt(3);
        char c=s.charAt(1);
        char d=s.charAt(4);
        StringBuilder sb = new StringBuilder();
        List<String> lis=new ArrayList<>();
        for(char i=a;i<=b;i++){
            sb=new StringBuilder();
            sb.append(i);
            for(char j=c;j<=d;j++){
                sb.append(j);
                lis.add(sb.toString());
                sb.deleteCharAt(1);
            }
         
        }
        return lis;
    }
}
