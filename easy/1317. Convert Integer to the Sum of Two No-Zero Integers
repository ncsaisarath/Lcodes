No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.

Given an integer n, return a list of two integers [A, B] where:

    A and B are No-Zero integers.
    A + B = n

The test cases are generated so that there is at least one valid solution. If there are many valid solutions you can return any of them.

 

Example 1:

Input: n = 2
Output: [1,1]
Explanation: A = 1, B = 1. A + B = n and both A and B do not contain any 0 in their decimal representation.

Example 2:

Input: n = 11
Output: [2,9]

 

Constraints:

    2 <= n <= 10^4


class Solution {
    public int[] getNoZeroIntegers(int n) {
        int first = 1, second = n - 1;
        while (!containZero(first) || !containZero(second)) {
            first++;
            second--;
        }
        return new int[]{first, second};
    }
    private boolean containZero(int a) {
        while (a > 0) {
            int digit = a % 10;
            if (digit == 0) return false;
            a /= 10;
        }
        return true;
    }
}


class Solution {
    public int[] getNoZeroIntegers(int n) {
        for(int i=1;i<=n/2;i++){
            if(!containsZero(i) && !containsZero(n-i))
                return new int[]{i,n-i};
        }
        return new int[]{};
    }
    
    boolean containsZero(int n){
        while(n>0){
            int temp=n%10;
            n/=10;
            if(temp==0)
                return true;
        }
        return false;
    }
}
