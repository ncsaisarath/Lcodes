There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:

Input: m = 3, n = 7
Output: 28

Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

 

Constraints:

    1 <= m, n <= 100



class Solution{
	public int uniquePaths(int m, int n){
		
		int[][] dp = new int[m][n];
        
        for(int i = 0; i < m; i++){
            dp[i][n - 1] = 1;
        }
        for(int j = 0; j < n; j++){
            dp[m - 1][j] = 1;
        }
        
		helper(dp, m, n, 0, 0);

		return dp[0][0];
	}

	private int helper(int[][] dp, int m, int n, int x , int y){
		if(x < 0 || y < 0 || x == m || y == n){
			return 0;
		}

		if(x == m - 1 && y == n - 1){
			return 1;
		}

		if(dp[x][y] > 0){
			return dp[x][y];
		}
		
		dp[x][y] = helper(dp, m, n, x + 1, y) + helper(dp, m , n, x, y + 1);
        
        return dp[x][y];
	}
}



class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m+1][n+1];
        dp[m-1][n-1] = 1;

        for (int i = m-1; i >= 0; i--) {
            for (int j = n-1; j >= 0; j--) {
                if (i == m-1 && j == n-1) continue;
                dp[i][j] = dp[i+1][j] + dp[i][j+1];
            }
        }
        // System.out.println(Arrays.deepToString(dp));
        return dp[0][0];
    }
}



class Solution {
    public int uniquePaths(int m, int n) {
        int[][] arr = new int[m+1][n+1];
        
        for(int i=0;i<=m;i++)
            arr[i][1]=1;
        for(int j=0;j<=n;j++)
            arr[1][j]=1;
        
        for(int i=2;i<=m;i++){
            for(int j=2;j<=n;j++){
                arr[i][j] = (arr[i-1][j]+arr[i][j-1]);
            }
        }
        
        return arr[m][n];
    }
}
