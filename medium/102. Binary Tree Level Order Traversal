Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 2000].
    -1000 <= Node.val <= 1000



class Solution {
    //Using DFS
    List<List<Integer>> result;
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        result = new ArrayList<>();
        if(root == null) return result;
        helper(root, 0);
        
        return result;
    }
    
    public void helper(TreeNode root, int level){
        //base
        if(root == null) return;
        
        //logic
        if(result.size() == level){
            result.add(new ArrayList<>());
        }
        result.get(level).add(root.val);
        helper(root.left, level + 1);
        helper(root.right, level + 1);
    }
    
}




class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return Collections.emptyList();
        var nextLevel = new ArrayDeque<TreeNode>();
        var results = new ArrayList<List<Integer>>();
        
        nextLevel.add(root);
        
        while(!nextLevel.isEmpty()) {
            var level = new ArrayList<Integer>();
            var currentLevel = nextLevel;
            nextLevel = new ArrayDeque<>();
            
            while(!currentLevel.isEmpty()) {
                var n = currentLevel.remove();
                level.add(n.val);
                if(n.left != null) nextLevel.add(n.left);
                if(n.right != null) nextLevel.add(n.right);
            }

            results.add(level);
        }
        
        return results;
    }
}



class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        if(root==null)
            return new LinkedList();
        
        List<List<Integer>> lis = new LinkedList<>();
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        LinkedList<Integer> templis;
        
        queue.add(root);
        TreeNode temp = null;
        
        while(queue.size()>0){
            int n = queue.size();
            templis = new LinkedList<Integer>();
            for(int i=0;i<n;i++){
                // TreeNode prev = temp;
                
                temp = queue.poll();
                templis.add(temp.val);
                if(temp.left!=null)
                    queue.add(temp.left);
                if(temp.right!=null)
                    queue.add(temp.right);
            }
            lis.add(new LinkedList<>(templis));
        }
        
        return lis;
        
    }
}
