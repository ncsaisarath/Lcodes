Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

 

Constraints:

    1 <= nums.length <= 8
    -10 <= nums[i] <= 10



import java.util.AbstractList;
import java.util.List;

public class Solution {
    private static final int MIN_VAL = -10;
    private static final int MAX_VAL = 10;
    private static final int M = MAX_VAL - MIN_VAL + 1;

    public List<List<Integer>> permuteUnique(int[] nums) {
        return new MyListList(nums);
    }

    private static class MyListList extends AbstractList<List<Integer>> {
        private final int[] map;
        private final int[] weights;
        private final int[][] dp;
        private final int n;

        MyListList(int[] nums) {
            this.map = new int[M];
            for (int num : nums) map[num - MIN_VAL]++;
            this.n = nums.length;
            this.weights = new int[M + 1];
            int count = 0, max = 0;
            for (int val : map) max = Math.max(max, val);

            this.dp = new int[n + 1][max + 1];
            for (int i = 0; i <= n; i++) dp[i][0] = 1;
            for (int j = 0; j <= max; j++) dp[j][j] = 1;
            for (int i = 1; i <= n; i++) for (int j = 1; j <= max; j++) dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];

            this.weights[0] = 1;
            for (int i = 0, prefSum = 0; i < M; i++) {
                weights[i + 1] = weights[i] * dp[prefSum + map[i]][map[i]];
                prefSum += map[i];
            }
        }

        @Override
        public List<Integer> get(int index) {
            int[] nums = new int[n];
            int used = 0;
            for (int i = M - 1, left = n; i >= 0; i--) {
                if (map[i] == 0) continue;
                int val = map[i];
                int subIndex = index / weights[i] + 1;
                index %= weights[i];
                for (int j = 0, rightLeft = left; j < n && val != 0; j++) {
                    if ((used >> j & 1) == 1) continue;
                    if (subIndex <= dp[rightLeft - 1][val - 1]) {
                        used |= 1 << j;
                        nums[j] = i + MIN_VAL;
                        val--;
                    } else subIndex -= dp[rightLeft - 1][val - 1];
                    rightLeft--;
                }
                left -= map[i];
            }
            return new MyList(nums);
        }

        @Override
        public int size() {
            return weights[M];
        }
    }

    private static class MyList extends AbstractList<Integer> {
        private final int[] nums;

        MyList(int[] nums) {
            this.nums = nums;
        }

        @Override
        public Integer get(int index) {
            return nums[index];
        }

        @Override
        public int size() {
            return nums.length;
        }
    }
}




class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        Arrays.sort(nums);
        dfs(nums, res, cur, new boolean[nums.length]);
        return res;
    }
    
    private void dfs(int[] nums, List<List<Integer>> res, List<Integer> cur, boolean[] visited) {
        if (cur.size() == nums.length) {
            res.add(new ArrayList<>(cur));
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] || i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) continue;
            cur.add(nums[i]);
            visited[i] = true;
            dfs(nums, res, cur, visited);
            cur.remove(cur.size() - 1);
            visited[i] = false;
        }
    }
}




class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        helper(nums, res, 0);
        return res;
    }
    
    private void helper(int[] nums, List<List<Integer>> res , int level) {
        if (level >= nums.length) {
            List<Integer> tmp = addAll(nums);
            res.add(new ArrayList<>(tmp));
            return;
        }
        
        Set<Integer> set = new HashSet<>();
        for (int i = level; i < nums.length; i++) {
            if (set.add(nums[i])) {
                swap(nums, i, level);
                helper(nums, res, level + 1);
                swap(nums, i, level);
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private List<Integer> addAll(int[] nums) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            result.add(nums[i]);
        }
        return result;
    }
}




class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();

        // count the occurrence of each number
        HashMap<Integer, Integer> counter = new HashMap<>();
        for (int num : nums) {
            counter.put(num,counter.getOrDefault(num,0)+1);
        }

        LinkedList<Integer> comb = new LinkedList<>();
        this.backtrack(comb, nums.length, counter, results);
        return results;
    }

    protected void backtrack(
            LinkedList<Integer> comb,
            Integer N,
            HashMap<Integer, Integer> counter,
            List<List<Integer>> results) {

        if (comb.size() == N) {
            // make a deep copy of the resulting permutation,
            // since the permutation would be backtracked later.
            results.add(new ArrayList<Integer>(comb));
            return;
        }

        for (Map.Entry<Integer, Integer> entry : counter.entrySet()) {
            Integer num = entry.getKey();
            Integer count = entry.getValue();
            if (count == 0)
                continue;
            // add this number into the current combination
            comb.addLast(num);
            counter.put(num, count - 1);

            // continue the exploration
            backtrack(comb, N, counter, results);

            // revert the choice for the next exploration
            comb.removeLast();
            counter.put(num, count);
        }
    }
}
