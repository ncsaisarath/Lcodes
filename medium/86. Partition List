Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:

Input: head = [2,1], x = 2
Output: [1,2]

 

Constraints:

    The number of nodes in the list is in the range [0, 200].
    -100 <= Node.val <= 100
    -200 <= x <= 200


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode dummy1 = new ListNode(0);
        ListNode dummy2 = new ListNode(0);
        ListNode one = dummy1, two = dummy2;
        while (head != null) {
            if (head.val < x) {
                one.next = head;
                one = one.next;
            } else {
                two.next = head;
                two = two.next;
            }
            head = head.next;
        }
        one.next = dummy2.next;
        two.next = null;
        return dummy1.next;
    }
}



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode start=head,curr=head,less=new ListNode(-1);
        ListNode cless=less,prev=new ListNode(-1);
        ListNode cprev=prev;
        while(curr!=null){
           
            if(curr.val<x){
                cless.next=new ListNode(curr.val);
                cless=cless.next;
                
            }else{
                cprev.next=new ListNode(curr.val);
                cprev=cprev.next;
            }
            curr=curr.next;
        }
        cless.next=prev.next;
        return less.next;
    }
}
