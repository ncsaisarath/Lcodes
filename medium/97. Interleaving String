Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

    s = s1 + s2 + ... + sn
    t = t1 + t2 + ... + tm
    |n - m| <= 1
    The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...

Note: a + b is the concatenation of strings a and b.

 

Example 1:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false

Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true

 

Constraints:

    0 <= s1.length, s2.length <= 100
    0 <= s3.length <= 200
    s1, s2, and s3 consist of lowercase English letters.

 

Follow up: Could you solve it using only O(s2.length) additional memory space?




class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        char[] c1 = s1.toCharArray(), c2 = s2.toCharArray(), c3 = s3.toCharArray();
        if (s1.length() + s2.length() != s3.length()) return false;
        return isInterleaveDFS(c1, c2, c3, 0, 0 , 0 , new boolean[s1.length()+1][s2.length()+1]);
    }
    public boolean isInterleaveDFS(char[] c1, char[] c2, char[] c3, int i, int j, int k, boolean[][] invalid){
        if (invalid[i][j]) return false;
        if (k == c3.length) return true; 
        boolean valid = i < c1.length && c1[i] == c3[k] && isInterleaveDFS(c1, c2, c3, i+1, j, k+1, invalid) ||
                j < c2.length && c2[j] == c3[k] && isInterleaveDFS(c1, c2, c3, i, j+1, k+1, invalid);
        if (!valid) invalid[i][j]= true;
        return valid; 
    }
}





class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        
        if(s3.isEmpty()){
            return s1.isEmpty() && s2.isEmpty();
        }
        
        if(s1.length() + s2.length() != s3.length()){
            return false;
        }
        
        dp = new Boolean[s1.length()+1][s2.length()+1];
        
        return rec(s1, s2, s3, 0, 0, 0);
        
    }
    
    Boolean[][] dp;
    
    boolean rec(String s1, String s2, String s3, int idx1, int idx2, int idx3){
        
        if(idx3 == s3.length()){
            return idx1 == s1.length() && idx2 == s2.length();
        }
        
        if(idx1 == s1.length() && idx2 == s2.length()){
            return false;
        }
        
        if(dp[idx1][idx2] != null){
            return dp[idx1][idx2];
        }
        
        boolean res = false;
        
        if(idx1 < s1.length() && s3.charAt(idx3) == s1.charAt(idx1)){
            res |= rec(s1, s2, s3, idx1 + 1, idx2, idx3 + 1);
        } 
        
        if(idx2 < s2.length() && s3.charAt(idx3) == s2.charAt(idx2)){
            res |= rec(s1, s2, s3, idx1, idx2 + 1, idx3 + 1);
        }
            
        return dp[idx1][idx2] = res;
        
    }
    
}





class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        /*
            iterate through s3 character by character
            1. if character can only be found in either s1 or s2 count character as found
            2. if both s1 and s2 could provide character, recursively check both as if they selected the character
            3. return true if any path completes
        */
        
        if(s1.length() + s2.length() != s3.length()) {
            return false;
        }
        boolean[][] memo = new boolean[s1.length() + 1][s2.length() + 1];
        boolean[][] flag = new boolean[s1.length() + 1][s2.length() + 1];

        return memoIsInterleave(s1, s2, s3, memo, flag, 0, 0, 0);
    }
    
    public boolean memoIsInterleave(String s1, String s2, String s3, boolean[][] memo, boolean[][] flag, int s1i, int s2i, int s3i) {        
        int s1Index = s1i;
        int s2Index = s2i;
        int s3Index = s3i;
        
        if(flag[s1i][s2i]) {
            return memo[s1i][s2i];
        }
        
        for(; s3Index < s3.length(); s3Index++) {
            boolean isS1 = s1Index < s1.length() && s1.charAt(s1Index) == s3.charAt(s3Index);
            boolean isS2 = s2Index < s2.length() && s2.charAt(s2Index) == s3.charAt(s3Index);

            if(!isS1 && !isS2) {
                memo[s1i][s2i] = false;
                flag[s1i][s2i] = true;
                break;
            }
            
            if(isS1 && isS2) {
                memo[s1i][s2i] = memoIsInterleave(s1, s2, s3, memo, flag, s1Index + 1, s2Index, s3Index + 1) || memoIsInterleave(s1, s2, s3, memo, flag, s1Index, s2Index + 1, s3Index + 1);
                flag[s1i][s2i] = true;
                break;
            }

            if(isS1) {
                s1Index++;
            }

            if(isS2) {
                s2Index++;
            }
        }

        if(s3Index == s3.length()) {
            memo[s1i][s2i] = true;
            flag[s1i][s2i] = true;
        }
        
        return memo[s1i][s2i];
    }
}




public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s3.length() != s1.length() + s2.length()) {
            return false;
        }
        boolean dp[] = new boolean[s2.length() + 1];
        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0 && j == 0) {
                    dp[j] = true;
                } else if (i == 0) {
                    dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);
                } else if (j == 0) {
                    dp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);
                } else {
                    dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                }
            }
        }
        return dp[s2.length()];
    }
}
