Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]

 

Constraints:

    The number of nodes in the list is n.
    1 <= n <= 500
    -500 <= Node.val <= 500
    1 <= left <= right <= n

 
Follow up: Could you do it in one pass?




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode p,q,r,cur,prev,end,fut;
        r = null;
        p= null;
        q = null;
        cur = head;
        int count =1;
        if(left == right || head == null || head.next == null)
            return head;
        while(cur!=null)
        {
            if(count == left)
            {
               p = cur;
            }
            if(count == right)
            {
                q = cur;
                break;
            }
            if(p== null)
            {
                if(r==null)
                {
                    
                r = head;
                    
                }
                else
            {
                r = r.next;
            }
            }
            count++;
            cur = cur.next;
            
        }
        cur = p.next;
        prev = p;
        end = q.next;
        while(cur!=end)
        {
            //System.out.println(cur.val);
            fut = cur.next;
            cur.next = prev;
            prev = cur;
            cur = fut;
        }
        if(r==null)
        {
            head = q;
        }
        else
        {
            r.next = q;
        }
        p.next = end;
        return head;
    }
}





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        int count=1;
        if(left==right)
            return head;
        ListNode prev=null,curr=head;
        while(count<left && curr!=null){
            count++;
            prev=curr;
            curr=curr.next;
        }
        ListNode brhead = prev;
        ListNode chead=curr;
        prev=null;
        while(curr!=null && count<=right){
            ListNode temp = curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
            count++;
        }
        chead.next=curr;
        if(brhead==null){
            return prev;
        }
        brhead.next=prev;
        
        return head;
        
    }
}
