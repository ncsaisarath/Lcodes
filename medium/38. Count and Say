The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

    countAndSay(1) = "1"
    countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.

To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string "3322251":

Given a positive integer n, return the nth term of the count-and-say sequence.

 

Example 1:

Input: n = 1
Output: "1"
Explanation: This is the base case.

Example 2:

Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = say "1" = one 1 = "11"
countAndSay(3) = say "11" = two 1's = "21"
countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"

 

Constraints:

    1 <= n <= 30


class Solution {
    public String countAndSay(int n) {
        if(n==1){
          return "1";
        }
        String pre=countAndSay(n-1);
        int count=0;
        char temp='0';
      StringBuilder sb= new StringBuilder();
        for(int i=0;i<pre.length();i++){
          if(i==0){
            count++;
            temp=pre.charAt(i);
            continue;
          }
          if(pre.charAt(i)==pre.charAt(i-1)){
            count++;
          }else{
            sb.append((char)(count+'0')).append(temp);
            temp=pre.charAt(i);
            count=1;
          }
        }
       sb.append((char)(count+'0')).append(temp);
      return sb.toString();
    }
}




class Solution {
    public String countAndSay(int n) {
        if (n == 1) return "1";
        String num = countAndSay(n - 1);
        char[] sa = num.toCharArray();
        char cur = sa[0];
        int count = 1;
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i < sa.length; i += 1) {
            if (cur == sa[i]) {
                count += 1;
            } else {
                sb.append(count).append(cur);
                cur = sa[i];
                count = 1;
            }
        }
        sb.append(count).append(cur);
        return sb.toString();
    }
}



class Solution {
    public String countAndSay(int n) {
        
        if(n==1)
            return "1";
        String x="1";
        n--;
        while(n-->0){
            StringBuilder sb = new StringBuilder();
            for(int i=0;i<x.length();){
                char c=x.charAt(i);
                int count=0;
                while(i<x.length() && x.charAt(i)==c){
                    i++;
                    count++;
                }
                sb.append(count);
                sb.append(c);
            }
            x=sb.toString();
        }
        return x;
    }
    
}
