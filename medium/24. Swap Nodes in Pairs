Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:

Input: head = [1,2,3,4]
Output: [2,1,4,3]

Example 2:

Input: head = []
Output: []

Example 3:

Input: head = [1]
Output: [1]

 

Constraints:

    The number of nodes in the list is in the range [0, 100].
    0 <= Node.val <= 100


class Solution {
    public ListNode swapPairs(ListNode head) {
        // if(head==null || head.next==null)
        //     return head;
        // ListNode dummy = new Node(-1);
        // dummy.next = solve(head);
        // return dummy.next;
        if (head==null || head.next==null){return head;}
		//eg:  1->2->3->4
        ListNode p1=head.next;   //currently pointing at 2
        while(p1.next!=null && p1.next.next!=null)
        {
            ListNode p2=p1.next;   //currently pointing at 3
            ListNode p3=p1.next.next;  //currently pointing at 4
            p1.next=p3;   //2 points 4
            p2.next=p3.next;  //3 points 4.next i.e. null
            p3.next=p2;  //4 points 3
            p1=p1.next.next;  //now p1 reaches 3 after linked list becomes 1->2->4->3
        }
		// now we just have to swap the first two nodes
        ListNode p4=head.next; 
        head.next=p4.next;
        p4.next=head;
        head=p4;
        return head;
    }
}
