Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:

Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12

 

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 200
    0 <= grid[i][j] <= 100



class Solution {
    // See Classfinder
    static int[][] dp;

    public int minPathSum(int[][] grid) {
        dp = new int [grid.length][grid[0].length];
		return recursiveMaximumPathHelper(grid, grid.length - 1, grid[0].length - 1);
	}

	public static int recursiveMaximumPathHelper(int[][] grid, int row, int col) {
		if (row == 0 && col == 0) {
			return grid[row][col];
		}

        if (dp[row][col] != 0) {
			return dp[row][col];
		}
        
		// Boundaries
		if (row == 0) {
			return dp[row][col] = grid[row][col] + recursiveMaximumPathHelper(grid, row, col - 1);
		}
		if (col == 0) {
			return dp[row][col] = grid[row][col] + recursiveMaximumPathHelper(grid, row - 1, col);
		}
        return dp[row][col] = grid[row][col] + Math.min(recursiveMaximumPathHelper(grid, row - 1, col), recursiveMaximumPathHelper(grid, row, col - 1));
	}
}




class Solution {
    
    public int minPathSum(int[][] grid) {
        
       int[][] dp = new int[grid.length + 1][grid[0].length + 1];
          for(int i=0; i<=grid.length; i++){
                for(int j=0; j<=grid[0].length; j++){
                    dp[i][j] = Integer.MAX_VALUE;
                }
        }
        dp[grid.length-1][grid[0].length - 1] = grid[grid.length-1][grid[0].length - 1];
        
        for(int i= grid.length-1; i >=0 ; i--){
            for(int j= grid[i].length-1; j >= 0; j--){
                
                if(i == grid.length-1 &&  j == grid[0].length-1){
                    dp[i][j] = grid[i][j];
                    continue;
                }
                dp[i][j] = grid[i][j] + Math.min(dp[i+1][j] , dp[i][j+1]);
            }
        }
        
       return dp[0][0]; 
    }
}




class Solution {
    public int minPathSum(int[][] grid) {
        
        int m = grid.length;
        int n = grid[0].length;
        
        if(m == 0 || n == 0) {
            return 0;
        }
        
        int[][] dp = new int[m][n]; 
        
        dp[0][0] = grid[0][0];
        
        for(int i = 1; i < m; i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        for(int i = 1; i < n; i++){
            dp[0][i] = dp[0][i-1] + grid[0][i];
        }
        
        for(int i = 1; i< m ; i++) {
            for(int j = 1; j< n ; j++) {
                dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j]; 
            }
        }
        return dp[m-1][n-1];
        
    }
    

}
