Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

 

Constraints:

    -100.0 < x < 100.0
    -231 <= n <= 231-1
    -104 <= xn <= 104


import java.util.*;
class Solution {
    public double myPow(double x, int n) {
        return Math.pow(x, n);
    }
}



class Solution {
    public double myPow(double x, int n) {
        double r=1.0;
        long m = n;
        if(m<0)m=-1*m;
            while(m>0){
                if(m%2==1){
                    r = r*x;
                    m--;
                }
                else{
                    x = x*x;
                    m =m/2;
                }
            }
        if(n<0)r=((double)(1.0)/(double)(r));
        return r;
    }
}




class Solution {
    public double myPow(double x, int n) {
        // return Math.pow(x,n);
        if(n==0)
            return 1.0;
        if(n<0){
            x = 1/x;
            n = -n;
        }
        return calculate(x,n);
    }
    
    public double calculate(double x, int n){
        if(n==0 || x==1.0) return 1.0; 
        if(n==1) return x;
        if(n%2==0)
            return calculate(x*x,n/2);
        else
            return x*calculate(x*x,(n-1)/2);
    }
}
