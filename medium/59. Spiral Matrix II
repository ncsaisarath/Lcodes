Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:

Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

Example 2:

Input: n = 1
Output: [[1]]

 

Constraints:

    1 <= n <= 20


class Solution {
    public int[][] generateMatrix(int n) {
        int[][] result = new int[n][n];
        int cnt = 1;
        int dir[][] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int d = 0;
        int row = 0;
        int col = 0;
        while (cnt <= n * n) {
            result[row][col] = cnt++;
            int r = Math.floorMod(row + dir[d][0], n);
            int c = Math.floorMod(col + dir[d][1], n);

            // change direction if next cell is non zero
            if (result[r][c] != 0) d = (d + 1) % 4;

            row += dir[d][0];
            col += dir[d][1];
        }
        return result;
    }
}





class Solution {
    public int[][] generateMatrix(int n) {
        int[][] result = new int[n][n];
        int cnt = 1;
        for (int layer = 0; layer < (n + 1) / 2; layer++) {
            // direction 1 - traverse from left to right
            for (int ptr = layer; ptr < n - layer; ptr++) {
                result[layer][ptr] = cnt++;
            }
            // direction 2 - traverse from top to bottom
            for (int ptr = layer + 1; ptr < n - layer; ptr++) {
                result[ptr][n - layer - 1] = cnt++;
            }
            // direction 3 - traverse from right to left
            for (int ptr = layer + 1; ptr < n - layer; ptr++) {
                result[n - layer - 1][n - ptr - 1] = cnt++;
            }
            // direction 4 - traverse from bottom to top
            for (int ptr = layer + 1; ptr < n - layer - 1; ptr++) {
                result[n - ptr - 1][layer] = cnt++;
            }
        }
        return result;
    }
}



class Solution {
    public int[][] generateMatrix(int n) {
        
        int[][] result = new int[n][n];
        int finale = n*n;
        int count = 1;
        int ic=0,jc=0,i,j;
        while(count<=finale){
            
            for(j=jc;j<n-jc;j++){
                result[ic][j]=count;
                count++;
                // finale++;
            }
            j--;
            for(i=ic+1;i<n-ic;i++){
                result[j][i]=count;
                count++;
                // finale++;
            }
            
            for(j=n-jc-2;j>=jc;j--){
                result[n-ic-1][j]=count;
                count++;
                // finale++;
            }
            
            for(i=n-ic-2;i>=ic+1;i--){
                result[i][jc]=count;
                count++;
                // finale++;
            }
            
            ic++;
            jc++;
            
            // for(i=0;i<n;i++){
            //     for(j=0;j<n;j++){
            //         System.out.print(result[i][j]+" ");
            //     }
            //     System.out.println();
            // }
                
        }
        for(i=0;i<n;i++){
            for(j=0;j<n;j++){
                if(result[i][j]==0){
                    result[i][j]=1+result[i-1][j];
                }
            }
            // System.out.println();
        }
        
        
        return result;
    }
}
