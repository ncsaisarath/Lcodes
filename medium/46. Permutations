Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:


Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:

Input: nums = [1]
Output: [[1]]

 

Constraints:

    1 <= nums.length <= 6
    -10 <= nums[i] <= 10
    All the integers of nums are unique.



class Solution {
    public void getPer(int idx, int[] nums, List<List<Integer>> ans){
        if(idx == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int i = 0 ; i < nums.length; i++){
                ds.add(nums[i]);
            }
            ans.add(ds);
            return;
        }
        
        for(int i = idx; i < nums.length; i++){
            swap(nums, i , idx);
            getPer(idx + 1, nums, ans);
            swap(nums, i , idx);
        }
    }
    
    private void swap(int[] nums, int idx1, int idx2){
        int temp = nums[idx1];
        nums[idx1] = nums[idx2];
        nums[idx2] = temp;
    }
       public List<List<Integer>> permute(int[] nums) {
           List<List<Integer>> ans = new ArrayList<>();
           getPer(0 , nums , ans);
           return ans;
       }
}




class Solution {
    private void recurPermute(int[] nums, List<Integer> ds, List<List<Integer>> ans, boolean[] freq){
        if(ds.size() == nums.length){
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0; i<nums.length; i++){
            if(!freq[i]){
                freq[i] = true;
                ds.add(nums[i]);
                recurPermute(nums, ds, ans, freq);
                ds.remove(ds.size() - 1);
                freq[i] = false;
            }
        }
    }
    
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean freq[] = new boolean[nums.length];
        recurPermute(nums, ds, ans, freq);
        return ans;
    }
}




class Solution {
  public void backtrack(int n,
                        ArrayList<Integer> nums,
                        List<List<Integer>> output,
                        int first) {
    // if all integers are used up
    if (first == n){
        output.add(new ArrayList<Integer>(nums));
        return;
    }
    for (int i = first; i < n; i++) {
      // place i-th integer first 
      // in the current permutation
      Collections.swap(nums, first, i);
      // use next integers to complete the permutations
      backtrack(n, nums, output, first + 1);
      // backtrack
      Collections.swap(nums, first, i);
    }
  }

  public List<List<Integer>> permute(int[] nums) {
    // init output list
    List<List<Integer>> output = new LinkedList();

    // convert nums into list since the output is a list of lists
    ArrayList<Integer> nums_lst = new ArrayList<Integer>();
    for (int num : nums)
      nums_lst.add(num);

    int n = nums.length;
    backtrack(n, nums_lst, output, 0);
    return output;
  }
}




class Solution {
    List<List<Integer>> lis;
    public List<List<Integer>> permute(int[] nums) {
        
        lis = new ArrayList<>();
        util(new ArrayList<Integer>(),nums);
        
        return lis;
        
    }
    
    public void util(List<Integer> temp,int[] arr){
        if(temp.size()==arr.length){
            // System.out.println("size match");
            lis.add(new ArrayList<>(temp));
        }
            
        else{
            for(int i=0;i<arr.length;i++){
                
                if(temp.contains(arr[i]))
                    continue;
                
                temp.add(arr[i]);
                util(temp,arr);
                temp.remove(temp.size()-1);
                   
            }
        }
    }
}
