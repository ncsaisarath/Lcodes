Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 2000].
    -100 <= Node.val <= 100





class Solution {
    List<List<Integer>> result = new ArrayList<>();
    
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        dfs(root, 0);
        
        return result;
    }
    
    void dfs(TreeNode node, int d){
        if (node == null){
            return;
        }
        
        if (d == result.size()){
            result.add(new ArrayList<Integer>());
        }
        
        if (d % 2 == 0){
            result.get(d).add(node.val);
        } else {
            result.get(d).add(0, node.val);
        }
        dfs(node.left, d+1);
        dfs(node.right, d+1);        
    }
}





class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue < TreeNode > q = new LinkedList < > ();
        List < List < Integer >>res = new ArrayList <List<Integer> > ();

        if (root == null) return res;

        q.add(root);
        boolean reverse = false;
        while (!q.isEmpty()) {
            int count = q.size();
            ArrayList < Integer > subList = new ArrayList < Integer > ();
            for (int i = 0; i < count; i++) {
               // int index = i;
                if (q.peek().left != null) q.add(q.peek().left);
                if (q.peek().right != null) q.add(q.peek().right);
                if (reverse == false) subList.add(q.poll().val);
                else subList.add(0, q.poll().val);
            }
            reverse = !reverse;
            res.add(subList);
        }
        return res;
    }
}





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root==null)
            return new ArrayList<>();
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(root);
        boolean reverse=true;
        List<Integer> arr = null;
        while(!q.isEmpty()){
            int size = q.size();
            arr = new LinkedList<>();
            int i=0;
            while(i<size){
                TreeNode temp = q.poll();
                
                if(temp.left!=null)
                    q.add(temp.left);
                if(temp.right!=null)
                    q.add(temp.right);
                if(reverse)
                    arr.add(temp.val);
                else
                    arr.add(0,temp.val);
                i++;
            }
            reverse=!reverse;
            result.add(arr);
        }
        
        return result;
    }
}
