Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:

Input: n = 1
Output: ["()"]

 

Constraints:

    1 <= n <= 8

Accepted
1,059,618
Submissions
1,509,456



class Solution {
    public List<String> generateParenthesis(int n) {
        char[] path=new char[2*n];
        List<String> ans=new ArrayList();
        process(path,0,0,n,ans);
        return ans;
    }
    
    public void process(char[] path,int index,int leftMinusRight,int leftRest,List<String> ans){
        if (index==path.length){
            ans.add(String.valueOf(path));
            return;
        }
        if (leftRest>0){
            path[index]='(';
            process(path,index+1,leftMinusRight+1,leftRest-1,ans);
        }
        if (leftMinusRight>0){
            path[index]=')';
            process(path,index+1,leftMinusRight-1,leftRest,ans);
        }
        
    }
}




class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        backtrack(ans, new StringBuilder(), 0, 0, n);
        return ans;
    }
    
    private void backtrack(List<String> ans, StringBuilder cur, int open, int close, int max) {
        if (cur.length() == max * 2) {
            ans.add(cur.toString());
            return;
        }

        if (open < max) {
            cur.append("(");
            backtrack(ans, cur, open + 1, close, max);
            cur.deleteCharAt(cur.length() - 1);
        }
        if (close < open) {
            cur.append(")");
            backtrack(ans, cur, open, close + 1, max);
            cur.deleteCharAt(cur.length() - 1);
        }
    }
}




class Solution {
    List<String> lis;
    public List<String> generateParenthesis(int n) {
        lis=new ArrayList<>();
        add(0,0,0,n,new StringBuilder());
        return lis;
    }
    
    public void add(int o,int c,int sum,int n,StringBuilder sb){
        if(sum<0 || o>n || c>n)
            return;
        if(o==n && c==n && sum==0){
            lis.add(sb.toString());
            return;
        }
        sb.append("(");
        add(o+1,c,sum+1,n,sb);
        sb.deleteCharAt(sb.length()-1);
        sb.append(")");
        add(o,c+1,sum-1,n,sb);
        sb.deleteCharAt(sb.length()-1);
        
    }
}
