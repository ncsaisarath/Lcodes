The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R

And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);

 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"

Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I

Example 3:

Input: s = "A", numRows = 1
Output: "A"

 

Constraints:

    1 <= s.length <= 1000
    s consists of English letters (lower-case and upper-case), ',' and '.'.
    1 <= numRows <= 1000




class Solution {
    public String convert(String s, int numRows) {
        int length = s.length();
        
        if (length < numRows || numRows <=1) {
            return s;
        }
        
        char[] chars = new char[length];
        int charIndex = 0;
        int interval = 2 * numRows - 2;
        
        for (int i = 0; i < numRows; ++i) {
            int step = interval - 2 * i;
            for (int j = i; j < length ; j += interval) {
                chars[charIndex] = s.charAt(j);
                ++charIndex;
                if (step > 0 && step < interval && j + step < length) {
                    chars[charIndex] = s.charAt(j + step);
                    ++charIndex;
                }
            }
            
        }
        
        return new String(chars);
    }
}




class Solution {
    public String convert(String s, int numRows) {

        if (numRows == 1) return s;

        StringBuilder ret = new StringBuilder();
        int n = s.length();
        int cycleLen = 2 * numRows - 2;

        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j + i < n; j += cycleLen) {
                ret.append(s.charAt(j + i));
                if (i != 0 && i != numRows - 1 && j + cycleLen - i < n)
                    ret.append(s.charAt(j + cycleLen - i));
            }
        }
        return ret.toString();
    }
}




class Solution {
    public String convert(String s, int numRows) {
        StringBuilder[] sbs=new StringBuilder[numRows];
        for(int i=0;i<numRows;i++){
            sbs[i]=new StringBuilder();
        }
        for(int j=0;j<s.length();){
            for(int k=0;j<s.length() && k<numRows;k++){
                sbs[k].append(s.charAt(j++));
            }
            for(int k=numRows-2;j<s.length() && k>0;k--){
                sbs[k].append(s.charAt(j++));
            }
        }
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<numRows;i++){
            sb.append(sbs[i].toString());
        }
        return sb.toString();
    }
}
