An n-bit gray code sequence is a sequence of 2n integers where:

    Every integer is in the inclusive range [0, 2n - 1],
    The first integer is 0,
    An integer appears no more than once in the sequence,
    The binary representation of every pair of adjacent integers differs by exactly one bit, and
    The binary representation of the first and last integers differs by exactly one bit.

Given an integer n, return any valid n-bit gray code sequence.

 

Example 1:

Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit

Example 2:

Input: n = 1
Output: [0,1]

 

Constraints:

    1 <= n <= 16



import java.util.AbstractList;

class Solution {
    
    public List<Integer> grayCode(int n) {
        return new GrayList(n);
    }

    private static class GrayList extends AbstractList<Integer> {

        private final int max;

        public GrayList(final int n) {
            this.max = (int)Math.pow(2, n);
        }

        @Override
        public Integer get(final int index) {
            return index ^ (index >> 1);
        }

        @Override
        public int size() {
            return this.max;
        }

        @Override
        public Iterator<Integer> iterator() {
            return new GrayCodeIterator(this.max);
        }
    }

    private static class GrayCodeIterator implements Iterator<Integer> {
        private int n = 0;
        private final int max;

        public GrayCodeIterator(final int max) {
            this.max = max;
        }

        @Override
        public boolean hasNext() {
            return this.n < max;
        }

        @Override
        public Integer next() {
            return this.n ^ (this.n++ >> 1);
        }
    }
}




class Solution {
    int number = 0;
    
    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList<>();
        int number = 0;
        dfs(0, n, result);
        return result;
    }
    
    private void dfs(int index, int n, List<Integer> result) {
        if (index == n) {
            result.add(number);
            return;
        }
        dfs(index + 1, n, result);
        number = number ^ (1 << (n - index - 1));
        dfs(index + 1, n, result);
    }
}




import java.lang.Math;
class Solution {
    public List<Integer> grayCode(int n) {
        ArrayList<Integer> res = new ArrayList<>();
        int num=(int)Math.pow(2,n);
        for (int i=0;i<num;i++){
            res.add((i>>1)^i);
        }
        return res;
    }
}




class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> lis = new ArrayList<>();
        lis.add(0);
        int t=1;
        for(int i=0;i<n;i++){
            for(int j=lis.size()-1;j>=0;j--){
                lis.add(lis.get(j)^t);
            }
            t<<=1;
        }
        return lis;
    }
}
