You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:

Input: height = [1,1]
Output: 1

 

Constraints:

    n == height.length
    2 <= n <= 105
    0 <= height[i] <= 10^4



class Solution {
    public int maxArea(int[] height) {
        int start = 0;
        int end = height.length - 1;
        int maxArea = 0;
        while (start < end) {
            int startHeight = height[start];
            int endHeight = height[end];
            int area = (end - start) * Math.min(startHeight, endHeight);
            maxArea = Math.max(area, maxArea);
            if (startHeight < endHeight) {
                while (start < end && height[start] <= startHeight) {
                    start++;
                }
            } else {
                while (start < end && height[end] <= endHeight) {
                    end--;
                }
            }
        }
        return maxArea;
    }
}




class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        int start = 0;
        int end = height.length - 1;
        while (start < end) {
            int h = height[start] < height[end] ? height[start] : height[end];
            if (max < h * (end - start)) {
                max = h * (end - start);
            }
            if (height[start] < height[end]) {
                int cur = start + 1;
                while (cur < height.length && height[cur] <= height[start]) {
                    cur += 1;
                }
                start = cur;
            } else {
                int cur = end - 1;
                while (cur >= 0 && height[cur] <= height[end]) {
                    cur -= 1;
                }
                end = cur;
            }
        }
        return max;
    }
}



class Solution {
    public int maxArea(int[] height) {
        int ans=0;
        int i=0;
        int j=height.length-1;
        int max=0;
        while(i<j){
            // int minWallHeight=Math.min(height[i],height[j]);
            if(height[i]<=height[j]){
                ans=Math.max(ans,height[i]*(j-i));
                i++;
            }
            else{
                 ans=Math.max(ans,height[j]*(j-i));
                 j--;
            }        
        }
        
        
        
        return ans;
    }
}



class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int max = Integer.MIN_VALUE;
        int i=0;
        int j=n-1;
        while(i<j){
            max = Math.max(max,(j-i) * Math.min(height[i],height[j]));
            if(height[i]<=height[j]){
                i++;
            }else{
                j--;
            }
        }
        return max;
    }
}



class Solution {
    public int maxArea(int[] height) {
        
        int len=height.length-1;
        int left=0,right=len;
        int max=0;
        while(left<right){
            
            max=Math.max(max,Math.min(height[left],height[right])*(right-left));
            if(height[left]<=height[right])
                left++;
            else{
                right--;
            }
            
        }
        return max;
    }
    
}
