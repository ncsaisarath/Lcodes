There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:

Input: nums = [1], target = 0
Output: -1

 

Constraints:

    1 <= nums.length <= 5000
    -10^4 <= nums[i] <= 10^4
    All values of nums are unique.
    nums is an ascending array that is possibly rotated.
    -10^4 <= target <= 10^4




class Solution {
    public int search(int[] arr, int target) {
        int pivot = findPivot(arr);

        if(pivot == -1)
            return binarySearch(arr,target,0,arr.length-1);

        if(arr[pivot] == target)
            return pivot;
        if(target >= arr[0])
            return binarySearch(arr, target,0,pivot-1);
        return binarySearch(arr, target, pivot+1, arr.length-1);
    }
    static int findPivot(int[] arr)
    {
        int start = 0, end = arr.length-1;
        while(start <= end)
        {
            int mid = start + (end-start)/2;
            if(mid < end && arr[mid] > arr[mid+1])
                return mid;
            if(mid > start && arr[mid] < arr[mid-1])
                return mid-1;
            if(arr[mid] <= arr[start])
                end=mid-1;
            else
                start=mid+1;
        }
        return -1;
    }

    static int binarySearch(int[] arr, int target, int start, int end){
        int middle=0;

        while(start<=end) {
            middle=start+(end-start)/2;
            if(target>arr[middle])
                start = middle+1;
            else if(target<arr[middle])
                end = middle-1;
            else
                return middle;
        }
        return -1;
    }
}




class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) return -1;
        int n = nums.length;
        
        int start = 0, end = n - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            
            if (nums[mid] > nums[end])
                start = mid + 1;
            else
                end = mid;
        }
        
        int minVal = start; // smallest num in the arr
        
        start = 0;
        end = n - 1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            int realMid = (mid + minVal) % n;
            
            if (nums[realMid] == target)
                return realMid;
            
            if (target > nums[realMid])
                start = mid + 1;
            else
                end = mid - 1;
        }
        
        return -1;
    }
}
