Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:

Input: s = "cbbd"
Output: "bb"

 

Constraints:

    1 <= s.length <= 1000
    s consist of only digits and English letters.



class Solution {
    int longestPStart = 0, longestPEnd = 0, lastPoint;

    public String longestPalindrome(String s) {
        if (s.length() < 2) return s;
        if (s.length() == 2) {
            return s.charAt(0) == s.charAt(1) ? s : s.substring(0, 1);
        }
        char[] chars = s.toCharArray();

        lastPoint = chars.length - 1;
        int splitPoint = lastPoint / 2;
        while (splitPoint < lastPoint && chars[splitPoint] == chars[splitPoint + 1]) {
            splitPoint++;
        }
        longestLeftPalindromeAt(chars, splitPoint, lastPoint / 2);
        longestRightPalindromeAt(chars, splitPoint + 1);
        return s.substring(longestPStart, longestPEnd + 1);
    }

    private void longestLeftPalindromeAt(char[] chars, int position, int shiftedStart) {
        int start = shiftedStart;
        int end = position;

        if ((position == 0 || position < (longestPEnd - longestPStart + 1) / 2)) {
            return;
        }
        while (start > 0 && chars[start] == chars[start - 1]) {
            start--;
        }
        position = start;
        while (start > 0 && end < lastPoint && chars[start - 1] == chars[end + 1]) {
            start--;
            end++;
        }
        if ((end - start) > (longestPEnd - longestPStart)) {
            longestPEnd = end;
            longestPStart = start;
        }
        position--;
        longestLeftPalindromeAt(chars, position, position);
    }

    private void longestRightPalindromeAt(char[] chars, int position) {
        int start = position;
        int end = position;
        int length = chars.length;

        if ((position == lastPoint || (length - position) < (longestPEnd - longestPStart + 1) / 2)) {
            return;
        }
        while (end < lastPoint && chars[end] == chars[end + 1]) {
            end++;
        }
        position = end;
        while (start > 0 && end < lastPoint && chars[start - 1] == chars[end + 1]) {
            start--;
            end++;
        }
        if ((end - start) > (longestPEnd - longestPStart)) {
            longestPEnd = end;
            longestPStart = start;
        }
        longestRightPalindromeAt(chars, position + 1);
    }
}





class Solution {
    int start = 0, end = 0;
    public String longestPalindrome(String s) {
        if (s.length() < 2)
            return s;
        char[] c = s.toCharArray();
        longestPallindromeAt(c, 0);
        return s.substring(start, end + 1);
    }
    private void longestPallindromeAt(char[] c, int p) {
        int a = p;
        int b = p;
        int n = c.length;
        if ((p == n - 1 || (n - p) < (end - start + 1)/2))
            return;
        while (b < n - 1 && c[b] == c[b + 1])
            b++;
        p = b;
        while (a > 0 && b < n - 1 && c[a - 1] == c[b + 1])
        {
            a--;
            b++;
        }
        if ((b - a) > (end - start))
        {
            end = b;
            start = a;
        }
        longestPallindromeAt(c, p + 1);
    }
}




class Solution {
    public String longestPalindrome(String s) {
    if (s == null || s.length() < 1) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}   
}
