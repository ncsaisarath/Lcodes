A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

    For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.

Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

 

Example 1:

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]

Example 2:

Input: s = "0000"
Output: ["0.0.0.0"]

Example 3:

Input: s = "101023"
Output: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]

 

Constraints:

    1 <= s.length <= 20
    s consists of digits only.



class Solution {
    private List<String> ips;
    private char[] cache;
    private int pointer;
    private int len;
    
    public List<String> restoreIpAddresses(String s) {
        ips = new ArrayList<>();
        cache = new char[15];
        pointer = -1;
        len = s.length();
        traverse(s, 0, 0);
        return ips;
    }
    
    private void traverse(String s, int level, int from) {
        char[] test = cache;
        int pointerInti = pointer;
        if (level++ == 3) {
            if (from < len && isValid(s, from, len - 1)) {
                write(s, from, len - 1);
                ips.add(String.valueOf(cache, 0, len + 3));
            }
            return;
        }
        for (int to = from, limit = Math.min(from + 3, len); to < limit; to++) {
            if (isValid(s, from, to)) {
                write(s, from, to);
                cache[++pointer] = '.';
                traverse(s, level, to + 1);
            }
            pointer = pointerInti;
        }
    }
    
    private void write(String s, int from, int to) {
        for (int i = from; i <= to; i++) {
            cache[++pointer] = s.charAt(i);
        }
    }
    
    private boolean isValid(String s, int from, int to) {
        if (to - from + 1 > 3) {
            return false;
        }
        int val = 0;
        for (int i = from; i <= to; i++) {
            val = val * 10 + s.charAt(i) - '0';
        }
        return val <= 255 && (s.charAt(from) != '0' || val == 0 && from == to);
    }
}


class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> result = new ArrayList<>();
        List<String> curr = new ArrayList<>();
        findValid(s, curr, result);
        return result;
    }
    
    private void findValid(String s, List<String> curr, List<String> result) {
		// Empty String can't be valid
        if (s.equals("")) {
            return;
        }
		// If we already have three valid IP numbers, the remaining string passed into the method should constitute 
		// the 4th IP number. If it is valid, we add that set of 4 IP numbers to our valid IP address list
        if (curr.size() == 3) {
            if (checkValidNum(s)) {
                StringBuilder sb = new StringBuilder(curr.get(0));
                sb.append(".").append(curr.get(1)).append(".").append(curr.get(2)).append(".").append(s);
                result.add(sb.toString());
            }
            return;
        }
		// We can have IP address numbers of one, two, and three digits, so we try each of these options. 
		// For example, if we have the string 123456, we can pick:
		// 1, and then find remaining valid IP numbers out of 23456, or
		// 12, and then find remaining valid IP numbers out of 3456, or
		// 123, and then find remaining valid IP numbers out of 456.
		//
		// The Math.min ensures we don't try to take a IP number greater than our remaining
		// IP string.
        for (int i = 1; i < Math.min(s.length(), 4); i++) {
            if (checkValidNum(s.substring(0, i))) {
                curr.add(s.substring(0, i));
                findValid(s.substring(i), curr, result);
                curr.remove(curr.size() - 1);
            }
        }
    }
    
	// Checks if a string is a valid IP number
    private boolean checkValidNum(String s) {
        if (s.length() > 3 || (s.length() > 1 && s.charAt(0) == '0')) {
            return false;
        }
        int num = Integer.parseInt(s);
        if (num < 0 || num > 255) {
            return false;
        }
        return true;
    }
}




class Solution {
    public List<String> restoreIpAddresses(String s) {
		if (s == null || s.isEmpty() || s.length() > 12) {
			return List.of();
		}
		List<String> res = new ArrayList<>();
		StringBuilder sb = new StringBuilder();
		traverseIPAddress(res, sb, s, 0, 0);
		return res;
	}
	private void traverseIPAddress(List<String> res, StringBuilder sb, String s, int pos, int cnt) {
		if (pos >= s.length() && cnt == 3) {
			res.add(sb.toString());
			return;
		}
		if (cnt > 3) {
			return;
		}
		for (int i = pos; i < s.length(); i++) {
			String part = s.substring(pos, i + 1);
			if (part.length() == 0 || part.length() > 1 && part.charAt(0) == '0' || Integer.valueOf(part) > 255) {
				break;
			}
			
			int len = sb.length();
			sb.append(part);
			if (i + 1 == s.length()) {
				traverseIPAddress(res, sb, s, i + 1, cnt);
			} else {
				sb.append('.');
				traverseIPAddress(res, sb, s, i + 1, cnt + 1);
			}
			sb.setLength(len);
		}
	}
}






class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> result = new ArrayList<>();
        List<String> curr = new ArrayList<>();
        findValid(s, curr, result);
        return result;
    }
    
    private void findValid(String s, List<String> curr, List<String> result) {
		
        if (s.equals("")) {
            return;
        }
		
        if (curr.size() == 3) {
            if (checkValidNum(s)) {
                StringBuilder sb = new StringBuilder(curr.get(0));
                sb.append(".").append(curr.get(1)).append(".").append(curr.get(2)).append(".").append(s);
                result.add(sb.toString());
            }
            return;
        }
		
        for (int i = 1; i < Math.min(s.length(), 4); i++) {
            if (checkValidNum(s.substring(0, i))) {
                curr.add(s.substring(0, i));
                findValid(s.substring(i), curr, result);
                curr.remove(curr.size() - 1);
            }
        }
    }
    
    private boolean checkValidNum(String s) {
        if (s.length() > 3 || (s.length() > 1 && s.charAt(0) == '0')) {
            return false;
        }
        int num = Integer.parseInt(s);
        if (num < 0 || num > 255) {
            return false;
        }
        return true;
    }
}
