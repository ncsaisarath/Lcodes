You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:

Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:

Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

 

Constraints:

    m == obstacleGrid.length
    n == obstacleGrid[i].length
    1 <= m, n <= 100
    obstacleGrid[i][j] is 0 or 1.


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        
        // If pathGrid[i][j] = n, it means there are n unique paths to reach node (i,j).
        int[][] pathGrid = new int[row][col];
        pathGrid[0][0] = obstacleGrid[0][0] == 0 ? 1 : 0;
        if (pathGrid[0][0] == 0) {
            return 0;
        }
        
        for (int i = 1; i < col; i++) {
            pathGrid[0][i] = obstacleGrid[0][i] == 1 ? 0 : pathGrid[0][i - 1];
        }
        
        for (int i = 1; i < row; i++) {
            pathGrid[i][0] = obstacleGrid[i][0] == 1 ? 0 : pathGrid[i - 1][0];
        }
        
        for (int c = 1; c < col; c++) {
            for (int r = 1; r < row; r++) {
                pathGrid[r][c] = obstacleGrid[r][c] == 1 ? 0 : pathGrid[r - 1][c] + pathGrid[r][c - 1];
            }
        }
        
        return pathGrid[row - 1][col - 1];
    }
}


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        int r=obstacleGrid.length;
        int c=obstacleGrid[0].length;
        if(obstacleGrid[0][0]==1 || obstacleGrid[r-1][c-1]==1 )
            return 0;
        int[][] dp = new int[r][c];
        for(int i=0;i<r;i++){
            if(obstacleGrid[i][0]!=1)
                dp[i][0]=1;
            else
                break;
        }
        for(int i=0;i<c;i++){
            if(obstacleGrid[0][i]!=1)
                dp[0][i]=1;
            else
                break;
        }
        for(int i=1;i<r;i++){
            for(int j=1;j<c;j++){
                if(obstacleGrid[i][j]!=1){
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[r-1][c-1];
    }
}



class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        if(m == 0) return 0;
        
        int n = grid[0].length;
        
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0] == 0 ? 1 : 0;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
               if(grid[i][j] != 1) {
                   if(i == 0 && j != 0)
                       dp[i][j] = dp[i][j-1];
                   else if(i != 0 && j == 0)
                       dp[i][j] = dp[i-1][j];
                   else if( i > 0 && j > 0)
                       dp[i][j] = dp[i][j-1] + dp[i-1][j];
               }     
            }
        }
        
        return dp[m-1][n-1];
    }
}
