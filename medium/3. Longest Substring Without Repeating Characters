Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

 

Constraints:

    0 <= s.length <= 5 * 104
    s consists of English letters, digits, symbols and spaces.

`

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        Integer[] chars = new Integer[128];

        int left = 0;
        int right = 0;

        int res = 0;
        while (right < s.length()) {
            char r = s.charAt(right);

            Integer index = chars[r];
            if (index != null && index >= left && index < right) {
                left = index + 1;
            }

            res = Math.max(res, right - left + 1);

            chars[r] = right;
            right++;
        }

        return res;
    }
}



class Solution {
    public int lengthOfLongestSubstring(String s) {
        int left = 0;
        int right = 0;
        int result = 0;
        int[] chars = new int[128];
        while(right < s.length()){
            char c = s.charAt(right);
            if(chars[c] > 0) {
                left = Math.max(left, chars[c]);
            }
            result = Math.max(result, right - left + 1);
            chars[c] = ++right;
        }
        return result;
    }
}



class Solution {
    public int lengthOfLongestSubstring(String s) {
        Integer[] chars = new Integer[128];
        
        int left = 0, right = 0, result = 0; 
        while (right < s.length()) {
            char c = s.charAt(right);
            
            Integer existingIndex = chars[c];
            if(existingIndex != null && existingIndex >= left && existingIndex < right)
                left = existingIndex + 1; 
            
            result = Math.max(result, right - left + 1);
            chars[c] = right;
            right++;
        }
        
        return result; 
    }
}



class Solution {
    public int lengthOfLongestSubstring(String s) {
        // int len=s.length();
        // if(len<=1)
        //     return len;
        // if(s.charAt(0)==s.charAt(len-1))
        //     return Math.max(Math.max(lengthOfLongestSubstring(s.substring(1)),
        //                     lengthOfLongestSubstring(s.substring(0,len-1))),lengthOfLongestSubstring(s.substring(1,len-1)));
        // else
        //     return Math.max(1+lengthOfLongestSubstring(s.substring(1,len-1)),1+lengthOfLongestSubstring(s.substring(0,len-2)));
        
        if(s.length()<=1)
            return s.length();
        char[] ch = s.toCharArray();
        boolean[] check = new boolean[128];
        int begin=0,end=0;
//         for(int low=0,high=0;high<s.length();high++){
            
//             if(check[s.charAt(high)]){
                
//                 while(s.charAt(low)!=s.charAt(high)){
//                     check[s.charAt(low)]=false;
//                     low++;
//                 }
//                 low++;
//             }else{
//                 check[s.charAt(high)] = true;
//                 if(end-begin<high-low){
//                     end=high;
//                     begin=low;
//                 }
                    
//             }
//         }
        
        for(int low=0,high=0;high<s.length();high++){
            
            if(check[ch[high]]){
                
                while(ch[low]!=ch[high]){
                    check[ch[low]]=false;
                    low++;
                }
                low++;
            }else{
                check[ch[high]] = true;
                if(end-begin<high-low){
                    end=high;
                    begin=low;
                }
                    
            }
        }
//         s.substring(begin,end+1).length()
        return end-begin+1;
        
    }
}
