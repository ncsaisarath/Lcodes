Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

 

Constraints:

    0 <= nums.length <= 105
    -10^9 <= nums[i] <= 10^9
    nums is a non-decreasing array.
    -10^9 <= target <= 10^9



class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) {
            return new int[] {-1, -1};
        }
        if (nums.length == 1) {
            return target == nums[0] ? new int[] {0, 0} : new int[] {-1, -1};
        }
        
        int l = 0, r = nums.length - 1;
        boolean found = false;
        int idx = 0;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == target) {
                found = true;
                idx = mid;
                break;
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        if (!found) {
            return new int[] {-1, -1};
        }
        int start = idx, end = idx;
        while (start - 1 >= 0 && nums[start] == nums[start - 1]) {
            start--;
        }
        while (end + 1 < nums.length && nums[end] == nums[end + 1]) {
            end++;
        }
        return new int[] {start, end};
    }
}




class Solution {
    public int[] searchRange(int[] nums, int target) {
      
        int[] res = new int[2];
        res[0] = -1;
        res[1] = -1;
        for(int i = 0 ; i < nums.length ; i++){
            if(nums[i] == target){
                res[0] = i;
                break;
            }
        }
        for(int j = nums.length - 1 ; j >= 0 ; j--){
            if(nums[j] == target){
                res[1] = j;
                break;
            }
        }
        return res;
    }
}
