Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.

 

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.

Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.

 

Constraints:

    -2^31 <= dividend, divisor <= 2^31 - 1
    divisor != 0


class Solution {
    public int divide(int dividend, int divisor) {
        int n;
        n=dividend/divisor;
         if(dividend==Integer.MIN_VALUE&&divisor==-1)
            return Integer.MAX_VALUE;
        return n;
    }
}



class Solution {
    public int divide(int dividend, int divisor) {
        
        if (divisor == 0 || (dividend == Integer.MIN_VALUE && divisor == -1)) {
            return Integer.MAX_VALUE;
        }
        // Sign of result
        int sign = (dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0) ? -1 : 1;
        // Quotient
        int quotient = 0;
        // Take the absolute value
        long absoluteDividend = Math.abs((long) dividend);
        long absoluteDivisor = Math.abs((long) divisor);
        // Loop until the  dividend is greater than divisor
        while (absoluteDividend >= absoluteDivisor) {
            // This represents the number of bits shifted or
            // how many times we can double the number
            int shift = 0;
            while (absoluteDividend >= (absoluteDivisor << shift)) {
                shift++;
            }
            // Add the number of times we shifted to the quotient
            quotient += (1 << (shift - 1));
            // Update the dividend for the next iteration
            absoluteDividend -= absoluteDivisor << (shift - 1);
        }
        return sign == -1 ? -quotient : quotient;
    }
}




class Solution {
    public int divide(int dividend, int divisor) {
        int sign  = 1;
        if((divisor < 0 && dividend > 0) || (divisor > 0 && dividend < 0)){
            sign = -1;
        }
        
        long lDividend = Math.abs((long) dividend);
        long lDivisor = Math.abs((long) divisor);
        if(lDividend == 0 || lDivisor > lDividend){
            return 0;
        }
        long res = divide(lDividend, lDivisor);
        if(res > Integer.MAX_VALUE){
            return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
        }
        return (int) (res * sign);
    }
    
    private long divide(long dividend, long divisor){
        if(dividend < divisor || dividend == 0){
            return 0;
        }
        
        long sum = divisor;
        long multi = 1;
        
        while(sum + sum <= dividend){
            sum += sum;
            multi += multi;
        }
        
        return multi + divide(dividend - sum, divisor);
    }
}




class Solution {
    public int divide(int dividend, int divisor) {
        if(dividend == 1<<31 && divisor == -1){
            return Integer.MAX_VALUE;
        }
        boolean sign = (dividend >= 0) == (divisor >= 0) ? true : false;
        
        dividend = Math.abs(dividend);
        divisor = Math.abs(divisor);
        
        int result = 0;
        while(dividend - divisor >= 0){
            int count = 0;
            while(dividend - (divisor << 1 << count) >= 0){
                count++;
            }
            result += 1 <<count;
            dividend -= divisor << count;
        }
        return sign ? result : -result;
        
        
    }
}
