Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.

 

Example 1:

Input: root = [2,1,3]
Output: true

Example 2:

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

 

Constraints:

    The number of nodes in the tree is in the range [1, 104].
    -231 <= Node.val <= 231 - 1



class Solution {
    public boolean isValidBST(TreeNode root) {
        return dfs(root, null, null);
    }
    
    private boolean dfs(TreeNode node, Integer min, Integer max){
        if(node == null) return true;
        
        if(min != null && node.val <= min)
            return false;
        
        if(max != null && node.val >= max)
            return false;
        
        return dfs(node.left, min, node.val) && dfs(node.right, node.val, max);
    }
}





class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST_RECURSION(root, Long.MIN_VALUE, Long.MAX_VALUE);
        
        /*
        if(root == null) return true;
        Stack<TreeNode> stack = new Stack<>();
        
        // Double.MIN_VALUE is the least positive value!!! 
        double MIN = - Double.MAX_VALUE;
        
        while(!stack.isEmpty() || root != null) {
            // Go down to the very left leaf node
            while(root != null) {
                stack.push(root);
                root = root.left;
            }
            
            // Pop out the left-most node, validate and update MIN
            root = stack.pop();
            if(root.val <= MIN) {
                return false;
            }
            MIN = root.val;
            
            // Process the right of left-most node
            root = root.right;
        }
        
        return true;
        */
    }
    
    private  boolean isValidBST_RECURSION(TreeNode root, long min, long max) {
        if(root == null) return true;
        
        if(root.val <= min || root.val >= max) {
            return false;
        }
        
        return isValidBST_RECURSION(root.left, min, root.val) && isValidBST_RECURSION(root.right, root.val, max);
    }
}




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> lis;
    public boolean isValidBST(TreeNode root) {
        
        lis = new ArrayList<>();
        dfs(root);
        
        Iterator i = lis.iterator();
        int last = (int)i.next();
        while(i.hasNext()){
            int temp = (int)i.next();
            if(last>=temp)
                return false;
            last = temp;      
        }
        
        return true;
    }
    
    public void dfs(TreeNode x){
        if(x==null)
            return;
        dfs(x.left);
        lis.add(x.val);
        dfs(x.right);
    }
}
